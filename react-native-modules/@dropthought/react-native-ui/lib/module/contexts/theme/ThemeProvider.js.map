{"version":3,"sources":["ThemeProvider.tsx"],"names":["React","useColorScheme","Colors","ThemeContext","THEME_OPTIONS","COLOR_SCHEMES","getColorScheme","theme","systemColorScheme","colorScheme","SYSTEM","LIGHT","DARK","includes","light","getFontColor","customFontColor","dark","fontColorDark","fontColorLight","getBackgroundColor","customBackgroundColor","backgroundColorDark","backgroundColorLight","useTheme","fontColor","backgroundColor","useMemo","ThemeProvider","children","themeValue"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,cAAT,QAAgD,cAAhD;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SACEC,aADF,EAEEC,aAFF,QAOO,eAPP;;AASA,SAASC,cAAT,CACEC,KADF,EAEEC,iBAFF,EAGqB;AAAA;;AACnB,MAAIC,WAAJ;;AACA,MAAIF,KAAK,KAAKH,aAAa,CAACM,MAA5B,EAAoC;AAClC,QAAIF,iBAAJ,EAAuB;AACrBC,MAAAA,WAAW,GAAGJ,aAAa,CAACG,iBAAD,CAA3B;AACD;AACF,GAJD,MAIO,IAAI,CAACJ,aAAa,CAACO,KAAf,EAAsBP,aAAa,CAACQ,IAApC,EAA0CC,QAA1C,CAAmDN,KAAnD,CAAJ,EAA+D;AACpEE,IAAAA,WAAW,GAAGJ,aAAa,CAACE,KAAD,CAA3B;AACD;;AACD,yBAAOE,WAAP,uDAAsBJ,aAAa,CAACS,KAApC;AACD;;AAED,SAASC,YAAT,CACEC,eADF,EAEEP,WAFF,EAGE;AACA,MAAIO,eAAJ,EAAqB;AACnB,WAAOA,eAAP;AACD;;AACD,MAAIP,WAAW,KAAKJ,aAAa,CAACY,IAAlC,EAAwC;AACtC,WAAOf,MAAM,CAACgB,aAAd;AACD;;AACD,SAAOhB,MAAM,CAACiB,cAAd;AACD;;AAED,SAASC,kBAAT,CACEC,qBADF,EAEEZ,WAFF,EAGE;AACA,MAAIY,qBAAJ,EAA2B;AACzB,WAAOA,qBAAP;AACD;;AACD,MAAIZ,WAAW,KAAKJ,aAAa,CAACY,IAAlC,EAAwC;AACtC,WAAOf,MAAM,CAACoB,mBAAd;AACD;;AACD,SAAOpB,MAAM,CAACqB,oBAAd;AACD;;AAED,SAASC,QAAT,CAAkB;AAChBjB,EAAAA,KADgB;AAEhBkB,EAAAA,SAAS,EAAET,eAFK;AAGhBU,EAAAA,eAAe,EAAEL;AAHD,CAAlB,EAQG;AACD,QAAMb,iBAAiB,GAAGP,cAAc,EAAxC;AACA,QAAMQ,WAAW,GAAGH,cAAc,CAACC,KAAD,EAAQC,iBAAR,CAAlC;AACA,QAAMiB,SAAS,GAAGV,YAAY,CAACC,eAAD,EAAkBP,WAAlB,CAA9B;AACA,QAAMiB,eAAe,GAAGN,kBAAkB,CACxCC,qBADwC,EAExCZ,WAFwC,CAA1C;AAKA,SAAOT,KAAK,CAAC2B,OAAN,CAAc,MAAM;AACzB,WAAO;AACLlB,MAAAA,WADK;AAELgB,MAAAA,SAFK;AAGLC,MAAAA;AAHK,KAAP;AAKD,GANM,EAMJ,CAACjB,WAAD,EAAcgB,SAAd,EAAyBC,eAAzB,CANI,CAAP;AAOD;;AASD,OAAO,SAASE,aAAT,CAAuB;AAC5BC,EAAAA,QAD4B;AAE5BtB,EAAAA,KAF4B;AAG5BkB,EAAAA,SAH4B;AAI5BC,EAAAA;AAJ4B,CAAvB,EAKG;AACR,QAAMI,UAAU,GAAGN,QAAQ,CAAC;AAAEjB,IAAAA,KAAF;AAASkB,IAAAA,SAAT;AAAoBC,IAAAA;AAApB,GAAD,CAA3B;AAEA,sBACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEI;AAA9B,KAA2CD,QAA3C,CADF;AAGD","sourcesContent":["import * as React from 'react';\nimport { useColorScheme, ColorSchemeName } from 'react-native';\nimport { Colors } from '../../styles';\nimport { ThemeContext } from './ThemeContext';\nimport {\n  THEME_OPTIONS,\n  COLOR_SCHEMES,\n  IThemeOptionsType,\n  IColorSchemesType,\n  FontColor,\n  BackgroundColor,\n} from './theme.const';\n\nfunction getColorScheme(\n  theme: IThemeOptionsType,\n  systemColorScheme: ColorSchemeName\n): IColorSchemesType {\n  let colorScheme;\n  if (theme === THEME_OPTIONS.SYSTEM) {\n    if (systemColorScheme) {\n      colorScheme = COLOR_SCHEMES[systemColorScheme];\n    }\n  } else if ([THEME_OPTIONS.LIGHT, THEME_OPTIONS.DARK].includes(theme)) {\n    colorScheme = COLOR_SCHEMES[theme];\n  }\n  return colorScheme ?? COLOR_SCHEMES.light;\n}\n\nfunction getFontColor(\n  customFontColor: FontColor,\n  colorScheme: IColorSchemesType\n) {\n  if (customFontColor) {\n    return customFontColor;\n  }\n  if (colorScheme === COLOR_SCHEMES.dark) {\n    return Colors.fontColorDark;\n  }\n  return Colors.fontColorLight;\n}\n\nfunction getBackgroundColor(\n  customBackgroundColor: BackgroundColor,\n  colorScheme: IColorSchemesType\n) {\n  if (customBackgroundColor) {\n    return customBackgroundColor;\n  }\n  if (colorScheme === COLOR_SCHEMES.dark) {\n    return Colors.backgroundColorDark;\n  }\n  return Colors.backgroundColorLight;\n}\n\nfunction useTheme({\n  theme,\n  fontColor: customFontColor,\n  backgroundColor: customBackgroundColor,\n}: {\n  theme: IThemeOptionsType;\n  fontColor: FontColor;\n  backgroundColor: BackgroundColor;\n}) {\n  const systemColorScheme = useColorScheme();\n  const colorScheme = getColorScheme(theme, systemColorScheme);\n  const fontColor = getFontColor(customFontColor, colorScheme);\n  const backgroundColor = getBackgroundColor(\n    customBackgroundColor,\n    colorScheme\n  );\n\n  return React.useMemo(() => {\n    return {\n      colorScheme,\n      fontColor,\n      backgroundColor,\n    };\n  }, [colorScheme, fontColor, backgroundColor]);\n}\n\ntype Props = {\n  children: React.ReactNode;\n  theme: IThemeOptionsType;\n  fontColor: FontColor;\n  backgroundColor: BackgroundColor;\n};\n\nexport function ThemeProvider({\n  children,\n  theme,\n  fontColor,\n  backgroundColor,\n}: Props) {\n  const themeValue = useTheme({ theme, fontColor, backgroundColor });\n\n  return (\n    <ThemeContext.Provider value={themeValue}>{children}</ThemeContext.Provider>\n  );\n}\n"]}