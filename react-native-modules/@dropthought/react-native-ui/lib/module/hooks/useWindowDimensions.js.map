{"version":3,"sources":["useWindowDimensions.ts"],"names":["React","useWindowDimensions","useRNDimensions","DimensionWidthType","phone","tablet","OrientationType","portrait","landscape","getWidthType","scaledSize","width","useMemo","widthType","useDimensionWidthType","windowDimensions","useOrientationType","height"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,mBAAmB,IAAIC,eADzB,QAGO,cAHP;AAKA;;AACA,OAAO,MAAMC,kBAAkB,GAAG;AAChCC,EAAAA,KAAK,EAAE,OADyB;AAEhCC,EAAAA,MAAM,EAAE;AAFwB,CAA3B;AAKP;;AACA,OAAO,MAAMC,eAAe,GAAG;AAC7BC,EAAAA,QAAQ,EAAE,UADmB;AAE7BC,EAAAA,SAAS,EAAE;AAFkB,CAAxB;AAKP;AACA;AACA;AACA;;AACA;;AAEA;AACA;AACA;AACA;;AACA,MAAMC,YAAY,GAAIC,UAAD,IAA4B;AAC/C,MAAIA,UAAU,CAACC,KAAX,GAAmB,GAAvB,EAA4B,OAAOR,kBAAkB,CAACC,KAA1B;AAC5B,SAAOD,kBAAkB,CAACE,MAA1B;AACD,CAHD;AAKA;AACA;AACA;;;AACA,OAAO,MAAMJ,mBAAmB,GAAG,MAAM;AACvC,QAAMS,UAAU,GAAGR,eAAe,EAAlC;AACA,SAAOF,KAAK,CAACY,OAAN,CACL,OAAO,EACL,GAAGF,UADE;AAELG,IAAAA,SAAS,EAAEJ,YAAY,CAACC,UAAD;AAFlB,GAAP,CADK,EAKL,CAACA,UAAD,CALK,CAAP;AAOD,CATM;AAWP;AACA;AACA;;AACA,OAAO,MAAMI,qBAAqB,GAAG,MAAM;AACzC,QAAMC,gBAAgB,GAAGd,mBAAmB,EAA5C;AACA,SAAOc,gBAAgB,CAACF,SAAxB;AACD,CAHM;AAKP;AACA;AACA;;AACA,OAAO,MAAMG,kBAAkB,GAAG,MAAM;AACtC,QAAMN,UAAU,GAAGR,eAAe,EAAlC;;AACA,MAAIQ,UAAU,CAACC,KAAX,GAAmBD,UAAU,CAACO,MAAlC,EAA0C;AACxC,WAAOX,eAAe,CAACE,SAAvB;AACD,GAFD,MAEO;AACL,WAAOF,eAAe,CAACC,QAAvB;AACD;AACF,CAPM","sourcesContent":["import * as React from 'react';\nimport {\n  useWindowDimensions as useRNDimensions,\n  ScaledSize,\n} from 'react-native';\n\n/** @enum {'phone' | 'tablet'} */\nexport const DimensionWidthType = {\n  phone: 'phone',\n  tablet: 'tablet',\n};\n\n/** @enum {'portrait' | 'landscape'} */\nexport const OrientationType = {\n  portrait: 'portrait',\n  landscape: 'landscape',\n};\n\n/**\n * @typedef {object} DimensionType\n * @property {DimensionWidthType} widthType\n */\n/** @typedef {DimensionType&ScaledSize} WindowDimensions */\n\n/**\n * @param {ScaledSize} scaledSize\n * @returns {DimensionWidthType}\n */\nconst getWidthType = (scaledSize: ScaledSize) => {\n  if (scaledSize.width < 768) return DimensionWidthType.phone;\n  return DimensionWidthType.tablet;\n};\n\n/**\n * @returns {WindowDimensions}\n */\nexport const useWindowDimensions = () => {\n  const scaledSize = useRNDimensions();\n  return React.useMemo(\n    () => ({\n      ...scaledSize,\n      widthType: getWidthType(scaledSize),\n    }),\n    [scaledSize]\n  );\n};\n\n/**\n * @returns {DimensionWidthType}\n */\nexport const useDimensionWidthType = () => {\n  const windowDimensions = useWindowDimensions();\n  return windowDimensions.widthType;\n};\n\n/**\n * @returns {OrientationType}\n */\nexport const useOrientationType = () => {\n  const scaledSize = useRNDimensions();\n  if (scaledSize.width > scaledSize.height) {\n    return OrientationType.landscape;\n  } else {\n    return OrientationType.portrait;\n  }\n};\n"]}