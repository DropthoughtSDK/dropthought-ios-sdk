{"version":3,"sources":["OpenQuestion.tsx"],"names":["React","View","StyleSheet","Text","TextInput","Platform","QuestionMetaDataType","metaDataTypeQuestionValidator","mandatoryQuestionValidator","GlobalStyle","Colors","MandatoryTitle","i18n","DimensionWidthType","useDimensionWidthType","useTheme","COLOR_SCHEMES","MAX_CHARACTER","metadataTypeKeyboard","metadataType","Email","Phone","Number","select","ios","default","Date","metadataTypeAutoCapitalize","Name","MetadataDesc","question","rtl","dimensionWidthType","styles","phone","phoneStyles","metaDataType","desc","t","descText","textAlignRight","OpenQuestion","anonymous","onFeedback","feedback","forgot","themeColor","colorScheme","fontColor","text","setText","useState","answers","focus","setFocus","hasEdited","setHasEdited","onEndEditingHandler","questionId","type","getBackgroundColorStyle","borderColor","dir","showAnonymousWarning","maxCharacterLength","characterLeft","length","isValid","tempFeedback","hasForgot","upperView","title","inputView","inputBG","dark","inputBGDark","input","color","questionBrand","inputPlaceholder","bottomView","subTextRow","flexRowReverse","questionContainer","create","openQuestionSubTitle","fontSize","fontStyle","fontWeight","letterSpacing","lineHeight","borderWidth","borderRadius","height","marginVertical","paddingHorizontal","borderColorDark","flex","textAlignVertical","paddingVertical15","paddingVertical","android","metaDataTypeInput","flexDirection","justifyContent","width","marginBottom"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  StyleSheet,\n  Text,\n  TextInput,\n  Platform,\n  KeyboardTypeOptions,\n} from 'react-native';\nimport {\n  QuestionMetaDataType,\n  metaDataTypeQuestionValidator,\n  mandatoryQuestionValidator,\n} from '../utils/data';\nimport GlobalStyle, { Colors } from '../styles';\nimport MandatoryTitle from './MandatoryTitle';\nimport i18n from '../translation';\nimport {\n  DimensionWidthType,\n  useDimensionWidthType,\n} from '../hooks/useWindowDimensions';\nimport { useTheme, COLOR_SCHEMES } from '../contexts/theme';\nimport type {\n  QuestionMetaDataType as TypeQuestionMetaDataType,\n  Question,\n  Feedback,\n} from '../data';\n\nconst MAX_CHARACTER = 4000;\n\nconst metadataTypeKeyboard = (\n  metadataType: TypeQuestionMetaDataType | undefined\n): KeyboardTypeOptions | undefined => {\n  switch (metadataType) {\n    case QuestionMetaDataType.Email:\n      return 'email-address';\n    case QuestionMetaDataType.Phone:\n      return 'phone-pad';\n    case QuestionMetaDataType.Number:\n      return Platform.select({\n        ios: 'numbers-and-punctuation',\n        default: 'default',\n      });\n    case QuestionMetaDataType.Date:\n    default:\n      return 'default';\n  }\n};\n\nconst metadataTypeAutoCapitalize = (\n  metadataType: TypeQuestionMetaDataType | undefined\n) => {\n  switch (metadataType) {\n    case QuestionMetaDataType.Name:\n      return 'words';\n    case QuestionMetaDataType.Email:\n    case QuestionMetaDataType.Phone:\n    case QuestionMetaDataType.Date:\n    case QuestionMetaDataType.Number:\n      return 'none';\n    default:\n      return 'sentences';\n  }\n};\n\nconst MetadataDesc = ({\n  question,\n  rtl,\n}: {\n  question: Question;\n  rtl: boolean;\n}) => {\n  const dimensionWidthType = useDimensionWidthType();\n  const styles =\n    dimensionWidthType === DimensionWidthType.phone ? phoneStyles : phoneStyles;\n\n  if (!question.metaDataType) return null;\n\n  // if translation is not found, do not print anything\n  const desc = i18n.t(`metadata-question-desc:${question.metaDataType}`, '');\n  if (!desc) return null;\n\n  return (\n    <Text style={[styles.descText, rtl && GlobalStyle.textAlignRight]}>\n      {desc}\n    </Text>\n  );\n};\n\ntype Props = {\n  anonymous: boolean;\n  question: Question;\n  onFeedback: (feedback: Feedback) => void;\n  feedback: Feedback;\n  forgot: boolean;\n  themeColor: string;\n};\n\nconst OpenQuestion = ({\n  anonymous,\n  question,\n  onFeedback,\n  // onValueChange, // Keep it for Kiosk usage\n  feedback,\n  forgot,\n  themeColor,\n}: Props) => {\n  const { colorScheme, fontColor } = useTheme();\n  const [text, setText] = React.useState<string>(\n    feedback?.answers[0] ? `${feedback?.answers[0]}` : ''\n  );\n  const [focus, setFocus] = React.useState(false);\n  const [hasEdited, setHasEdited] = React.useState(false);\n\n  const dimensionWidthType = useDimensionWidthType();\n  const styles =\n    dimensionWidthType === DimensionWidthType.phone ? phoneStyles : phoneStyles;\n\n  const onEndEditingHandler = () => {\n    setHasEdited(true);\n    onFeedback({\n      questionId: question.questionId,\n      answers: [text],\n      type: 'open',\n    });\n  };\n\n  const getBackgroundColorStyle = () => {\n    return { borderColor: themeColor };\n  };\n\n  const rtl = i18n.dir() === 'rtl';\n  const showAnonymousWarning =\n    anonymous &&\n    question.metaDataType &&\n    (question.metaDataType === 'Email' ||\n      question.metaDataType === 'Name' ||\n      question.metaDataType === 'Phone');\n\n  const maxCharacterLength = MAX_CHARACTER;\n  const characterLeft = maxCharacterLength - text.length;\n\n  const isValid = metaDataTypeQuestionValidator(question, text);\n\n  /** @type {Feedback} */\n  const tempFeedback = {\n    questionId: question.questionId,\n    answers: [text],\n    type: 'open',\n  };\n  const hasForgot =\n    forgot && !mandatoryQuestionValidator(question, tempFeedback);\n\n  const upperView = (\n    <>\n      <MandatoryTitle\n        forgot={hasForgot}\n        invalidMessage={\n          // show the error message after the user has done edited\n          hasEdited && !isValid\n            ? i18n.t(`metadata-invalid-message:${question.metaDataType}`, '')\n            : ''\n        }\n        question={question}\n        style={styles.title}\n      />\n      <MetadataDesc question={question} rtl={rtl} />\n    </>\n  );\n\n  const inputView = (\n    <View\n      style={[\n        styles.inputBG,\n        colorScheme === COLOR_SCHEMES.dark ? styles.inputBGDark : {},\n        focus && getBackgroundColorStyle(),\n        // question.metaDataType && styles.metaDataTypeInput,\n        // !question.metaDataType && styles.paddingVertical15,\n      ]}\n    >\n      <TextInput\n        style={[\n          styles.input,\n          { color: fontColor },\n          rtl && GlobalStyle.textAlignRight,\n        ]}\n        multiline={true}\n        onChangeText={(t) => {\n          setText(t);\n          // onValueChange(text) // Keep it for Kiosk usage\n        }}\n        placeholder={question.questionBrand}\n        placeholderTextColor={Colors.inputPlaceholder}\n        onEndEditing={onEndEditingHandler}\n        value={text}\n        onFocus={() => {\n          setFocus(true);\n        }}\n        onBlur={() => {\n          setFocus(false);\n        }}\n        maxLength={maxCharacterLength}\n        keyboardType={metadataTypeKeyboard(question.metaDataType)}\n        autoCapitalize={metadataTypeAutoCapitalize(question.metaDataType)}\n      />\n    </View>\n  );\n\n  const bottomView = (\n    <View style={[styles.subTextRow, rtl && GlobalStyle.flexRowReverse]}>\n      <Text style={styles.descText}>\n        {showAnonymousWarning && i18n.t('survey:metadata-anonymous-warning')}\n      </Text>\n      <Text style={styles.descText}>\n        {characterLeft} / {maxCharacterLength}\n      </Text>\n    </View>\n  );\n\n  return (\n    <View style={GlobalStyle.questionContainer}>\n      {upperView}\n      {inputView}\n      {bottomView}\n    </View>\n  );\n};\n\nexport default OpenQuestion;\n\nconst phoneStyles = StyleSheet.create({\n  descText: {\n    color: Colors.openQuestionSubTitle,\n    fontSize: 12,\n    fontStyle: 'normal',\n    fontWeight: 'normal',\n    letterSpacing: 0,\n    lineHeight: 17,\n  },\n  inputBG: {\n    borderColor: Colors.borderColor,\n    borderWidth: 1,\n    borderRadius: 4,\n    height: 101,\n    marginVertical: 10,\n    paddingHorizontal: 15,\n  },\n  inputBGDark: {\n    borderColor: Colors.borderColorDark,\n  },\n  input: {\n    flex: 1,\n\n    // when multi=true, it is important to note that this aligns the text to the top on iOS,\n    // and centers it on Android. Use with textAlignVertical set to top for the same behavior in both platforms.\n    textAlignVertical: 'top', // this is an android only props, won't affect ios\n  },\n  paddingVertical15: {\n    ...Platform.select({\n      ios: {\n        paddingVertical: 15,\n      },\n      android: {\n        paddingVertical: 5,\n      },\n    }),\n  },\n  metaDataTypeInput: {\n    fontSize: 14,\n    height: 40,\n  },\n  subTextRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    width: '100%',\n  },\n  title: {\n    marginBottom: 6,\n  },\n});\n"]}