{"version":3,"sources":["MandatoryTitle.tsx"],"names":["View","Text","StyleSheet","React","useAddMandatoryRef","GlobalStyle","Colors","QuestionWarningMessage","i18n","DimensionWidthType","useDimensionWidthType","useTheme","MandatoryTitle","forgot","invalidMessage","question","style","rtl","dir","dimensionWidthType","fontColor","ref","useRef","addMandatoryRef","useEffect","current","questionId","styles","horizontal","flexRowReverse","questionTitle","split","map","text","index","questionTitleSize","color","mandatory","hint","t","create","phone","fontSize","tablet","mandatoryRed","flexDirection","flexWrap","marginBottom","textAlignVertical","alignSelf"],"mappings":"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","sourcesContent":["import { View, Text, StyleSheet, ViewStyle } from 'react-native';\nimport * as React from 'react';\n\nimport { useAddMandatoryRef } from '../contexts/survey-page';\nimport GlobalStyle, { Colors } from '../styles';\nimport QuestionWarningMessage from './QuestionWarningMessage';\nimport i18n from '../translation';\nimport {\n  DimensionWidthType,\n  useDimensionWidthType,\n} from '../hooks/useWindowDimensions';\nimport { useTheme } from '../contexts/theme';\nimport type { Question } from '../data';\n\ntype Props = {\n  forgot?: boolean;\n  invalidMessage?: string;\n  question: Question;\n  style?: ViewStyle;\n};\n\nconst MandatoryTitle = ({\n  forgot,\n  invalidMessage = '',\n  question,\n  style,\n}: Props) => {\n  const rtl = i18n.dir() === 'rtl';\n  const dimensionWidthType = useDimensionWidthType();\n  const { fontColor } = useTheme();\n\n  const ref = React.useRef<View>(null);\n  const addMandatoryRef = useAddMandatoryRef();\n\n  React.useEffect(() => {\n    if (ref.current) {\n      addMandatoryRef(question.questionId, ref.current);\n    }\n  }, [addMandatoryRef, question.questionId]);\n\n  return (\n    <View\n      ref={ref}\n      style={[styles.horizontal, style, rtl && GlobalStyle.flexRowReverse]}\n    >\n      {question.questionTitle.split(' ').map((text, index) => (\n        <Text\n          key={index}\n          style={[\n            styles.questionTitle,\n            questionTitleSize[dimensionWidthType],\n            { color: fontColor },\n          ]}\n        >\n          {text + ' '}\n        </Text>\n      ))}\n      {question.mandatory && <Text style={styles.hint}>*</Text>}\n      <QuestionWarningMessage\n        // forgot message has higher priority than custom invalid message\n        message={forgot ? i18n.t('survey:mandatory') : invalidMessage}\n      />\n    </View>\n  );\n};\n\nexport default MandatoryTitle;\n\nconst questionTitleSize = StyleSheet.create({\n  [DimensionWidthType.phone]: {\n    fontSize: 16,\n  },\n  [DimensionWidthType.tablet]: {\n    fontSize: 18,\n  },\n});\n\nconst styles = StyleSheet.create({\n  hint: {\n    color: Colors.mandatoryRed,\n    fontSize: 18,\n  },\n  horizontal: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  questionTitle: {\n    fontSize: 18,\n    marginBottom: 2,\n    textAlignVertical: 'center',\n    alignSelf: 'center',\n  },\n});\n"]}