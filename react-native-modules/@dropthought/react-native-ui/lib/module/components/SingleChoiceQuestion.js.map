{"version":3,"sources":["SingleChoiceQuestion.tsx"],"names":["React","PureComponent","View","StyleSheet","isNil","GlobalStyle","MandatoryTitle","OptionWithHighlight","OtherOptionWithHighlight","getOptionsFromQuestion","SingleChoiceQuestion","constructor","props","otherText","getInitialValueFromFeedbackProps","feedback","answers","answer","Number","isInteger","question","options","length","undefined","onFeedback","bind","onChangeValueHandler","state","value","id","setState","questionId","type","index","newValue","checked","otherFlag","renderRadios","map","title","option","isOther","isActive","themeColor","render","questionContainer","forgot","styles","radioForm","create","marginTop"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,cAAjC;AACA,SAASC,KAAT,QAAsB,OAAtB;AAEA,OAAOC,WAAP,MAAwB,WAAxB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,wBAAP,MAAqC,4BAArC;AACA,SAASC,sBAAT,QAAuC,eAAvC;;AA8BA,MAAMC,oBAAN,SAAmCT,aAAnC,CAA+D;AAC7DU,EAAAA,WAAW,CAACC,KAAD,EAAe;AACxB,UAAMA,KAAN;AAEA,QAAIC,SAAS,GAAG,EAAhB;;AACA,aAASC,gCAAT,GAA4C;AAC1C,UACEF,KAAK,CAACG,QAAN,IACAH,KAAK,CAACG,QAAN,CAAeC,OADf,IAEA,CAACZ,KAAK,CAACQ,KAAK,CAACG,QAAN,CAAeC,OAAf,CAAuB,CAAvB,CAAD,CAHR,EAIE;AACA,cAAMC,MAAM,GAAGL,KAAK,CAACG,QAAN,CAAeC,OAAf,CAAuB,CAAvB,CAAf;;AACA,YAAIE,MAAM,CAACC,SAAP,CAAiBF,MAAjB,CAAJ,EAA8B;AAC5B,iBAAOA,MAAP;AACD,SAFD,MAEO;AACL;AACA;AACA;AACAJ,UAAAA,SAAS,GAAGI,MAAZ;AACA,iBAAOL,KAAK,CAACQ,QAAN,CAAeC,OAAf,CAAuBC,MAA9B;AACD;AACF;;AACD,aAAOC,SAAP;AACD;;AAED,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKC,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BD,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAKE,KAAL,GAAa;AACX;AACAC,MAAAA,KAAK,EAAEd,gCAAgC,EAF5B;AAGXO,MAAAA,OAAO,EAAEZ,sBAAsB,CAACG,KAAK,CAACQ,QAAP,CAHpB;AAIXP,MAAAA;AAJW,KAAb;AAMD,GAjC4D,CAmC7D;;;AACAW,EAAAA,UAAU,CAACK,EAAD,EAAa;AACrB,SAAKC,QAAL,CAAc;AACZF,MAAAA,KAAK,EAAEC,EADK;AAGZ;AACAhB,MAAAA,SAAS,EAAE;AAJC,KAAd;AAMA,SAAKD,KAAL,CAAWY,UAAX,CAAsB;AACpBO,MAAAA,UAAU,EAAE,KAAKnB,KAAL,CAAWQ,QAAX,CAAoBW,UADZ;AAEpBf,MAAAA,OAAO,EAAE,CAACa,EAAD,CAFW;AAGpBG,MAAAA,IAAI,EAAE;AAHc,KAAtB;AAKD,GAhD4D,CAkD7D;;;AACAN,EAAAA,oBAAoB,CAClBO,KADkB,EAElBC,QAFkB,EAGlB;AACA,SAAKJ,QAAL,CAAc;AACZ;AACAF,MAAAA,KAAK,EAAEM,QAAQ,CAACC,OAAT,GAAmBF,KAAnB,GAA2BV,SAFtB;AAGZV,MAAAA,SAAS,EAAEqB,QAAQ,CAACC,OAAT,GAAmBD,QAAQ,CAACN,KAA5B,GAAoC;AAHnC,KAAd;AAKA,SAAKhB,KAAL,CAAWY,UAAX,CAAsB;AACpBO,MAAAA,UAAU,EAAE,KAAKnB,KAAL,CAAWQ,QAAX,CAAoBW,UADZ;AAEpB;AACA;AACAf,MAAAA,OAAO,EAAEkB,QAAQ,CAACC,OAAT,GAAmB,CAACD,QAAQ,CAACN,KAAV,CAAnB,GAAsC,EAJ3B;AAKpBI,MAAAA,IAAI,EAAE,cALc;AAOpB;AACAI,MAAAA,SAAS,EAAEF,QAAQ,CAACC;AARA,KAAtB;AAUD;;AAEDE,EAAAA,YAAY,GAAG;AACb,WAAO,KAAKV,KAAL,CAAWN,OAAX,CAAmBiB,GAAnB,CAAuB,CAAC;AAAEC,MAAAA,KAAK,EAAEC,MAAT;AAAiBC,MAAAA;AAAjB,KAAD,EAA6BR,KAA7B,KAAuC;AACnE,YAAMS,QAAQ,GAAG,KAAKf,KAAL,CAAWC,KAAX,KAAqBK,KAAtC;;AAEA,UAAIQ,OAAJ,EAAa;AACX,4BACE,oBAAC,wBAAD;AACE,UAAA,EAAE,EAAER,KADN;AAEE,UAAA,GAAG,EAAEA,KAFP;AAGE,UAAA,OAAO,EAAE,KAAKT,UAHhB;AAIE,UAAA,KAAK,EAAEgB,MAJT;AAKE,UAAA,OAAO,EAAEE,QALX;AAME,UAAA,YAAY,EAAE,KAAK9B,KAAL,CAAW+B,UAN3B;AAOE,UAAA,aAAa,EAAE,KAAKjB,oBAPtB;AAQE,UAAA,SAAS,EAAE,KAAKC,KAAL,CAAWd;AARxB,UADF;AAYD;;AAED,0BACE,oBAAC,mBAAD;AACE,QAAA,EAAE,EAAEoB,KADN;AAEE,QAAA,GAAG,EAAEA,KAFP;AAGE,QAAA,OAAO,EAAE,KAAKT,UAHhB;AAIE,QAAA,KAAK,EAAEgB,MAJT;AAKE,QAAA,OAAO,EAAEE,QALX;AAME,QAAA,YAAY,EAAE,KAAK9B,KAAL,CAAW+B;AAN3B,QADF;AAUD,KA5BM,CAAP;AA6BD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEvC,WAAW,CAACwC;AAAzB,oBACE,oBAAC,cAAD;AACE,MAAA,MAAM,EAAE,KAAKjC,KAAL,CAAWkC,MADrB;AAEE,MAAA,QAAQ,EAAE,KAAKlC,KAAL,CAAWQ;AAFvB,MADF,eAKE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE2B,MAAM,CAACC;AAApB,OAAgC,KAAKX,YAAL,EAAhC,CALF,CADF;AASD;;AAlH4D;;AAqH/D,MAAMU,MAAM,GAAG5C,UAAU,CAAC8C,MAAX,CAAkB;AAC/BD,EAAAA,SAAS,EAAE;AACTE,IAAAA,SAAS,EAAE;AADF;AADoB,CAAlB,CAAf;AAMA,eAAexC,oBAAf","sourcesContent":["import React, { PureComponent } from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { isNil } from 'ramda';\n\nimport GlobalStyle from '../styles';\nimport MandatoryTitle from './MandatoryTitle';\nimport OptionWithHighlight from './OptionWithHighlight';\nimport OtherOptionWithHighlight from './OtherOptionWithHighlight';\nimport { getOptionsFromQuestion } from '../utils/data';\nimport type {\n  Feedback as OriginFeedback,\n  Question as OriginQuestion,\n  Option,\n} from '../data';\n\ntype Feedback = OriginFeedback & {\n  answers: (string | number)[];\n};\n\ntype Question = OriginQuestion & {\n  options: string[];\n  scale: string;\n};\n\ntype Props = {\n  question: Question;\n  feedback: Feedback;\n  onFeedback: (feedback: Feedback) => void;\n  forgot: boolean;\n  themeColor: string; // use hex color string\n};\n\ntype State = {\n  options: Option[];\n  value: number | undefined;\n  otherText: string | undefined;\n};\n\nclass SingleChoiceQuestion extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    let otherText = '';\n    function getInitialValueFromFeedbackProps() {\n      if (\n        props.feedback &&\n        props.feedback.answers &&\n        !isNil(props.feedback.answers[0])\n      ) {\n        const answer = props.feedback.answers[0];\n        if (Number.isInteger(answer)) {\n          return answer;\n        } else {\n          // if the answer is not a number type,\n          // it is for other label, return the last index\n          // @ts-ignore\n          otherText = answer;\n          return props.question.options.length;\n        }\n      }\n      return undefined;\n    }\n\n    this.onFeedback = this.onFeedback.bind(this);\n    this.onChangeValueHandler = this.onChangeValueHandler.bind(this);\n    this.state = {\n      // @ts-ignore\n      value: getInitialValueFromFeedbackProps(),\n      options: getOptionsFromQuestion(props.question),\n      otherText,\n    };\n  }\n\n  // when normal option is pressed, set the id(index) as answer\n  onFeedback(id: number) {\n    this.setState({\n      value: id,\n\n      // DK-864, when selecting normal options, reset the other input's value\n      otherText: '',\n    });\n    this.props.onFeedback({\n      questionId: this.props.question.questionId,\n      answers: [id],\n      type: 'singleChoice',\n    });\n  }\n\n  // when other option's value is changed, newValues is {checked: boolean, value: string}\n  onChangeValueHandler(\n    index: any,\n    newValue: { checked: boolean; value: string | undefined }\n  ) {\n    this.setState({\n      // if newValues is checked, set value to this index\n      value: newValue.checked ? index : undefined,\n      otherText: newValue.checked ? newValue.value : '',\n    });\n    this.props.onFeedback({\n      questionId: this.props.question.questionId,\n      // the answer of this feedback is the text value\n      // @ts-ignore\n      answers: newValue.checked ? [newValue.value] : [],\n      type: 'singleChoice',\n\n      // set otherFlag if newValue is checked\n      otherFlag: newValue.checked,\n    });\n  }\n\n  renderRadios() {\n    return this.state.options.map(({ title: option, isOther }, index) => {\n      const isActive = this.state.value === index;\n\n      if (isOther) {\n        return (\n          <OtherOptionWithHighlight\n            id={index}\n            key={index}\n            onPress={this.onFeedback}\n            title={option}\n            checked={isActive}\n            checkedColor={this.props.themeColor}\n            onChangeValue={this.onChangeValueHandler}\n            textValue={this.state.otherText}\n          />\n        );\n      }\n\n      return (\n        <OptionWithHighlight\n          id={index}\n          key={index}\n          onPress={this.onFeedback}\n          title={option}\n          checked={isActive}\n          checkedColor={this.props.themeColor}\n        />\n      );\n    });\n  }\n\n  render() {\n    return (\n      <View style={GlobalStyle.questionContainer}>\n        <MandatoryTitle\n          forgot={this.props.forgot}\n          question={this.props.question}\n        />\n        <View style={styles.radioForm}>{this.renderRadios()}</View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  radioForm: {\n    marginTop: 20,\n  },\n});\n\nexport default SingleChoiceQuestion;\n"]}