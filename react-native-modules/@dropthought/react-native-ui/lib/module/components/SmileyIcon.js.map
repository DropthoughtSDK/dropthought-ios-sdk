{"version":3,"sources":["SmileyIcon.tsx"],"names":["View","Image","TouchableWithoutFeedback","StyleSheet","Text","React","DimensionWidthType","useDimensionWidthType","GlobalStyle","i18n","useTheme","SmileyIcon","props","fontColor","dimensionWidthType","isPhone","phone","styles","phoneStyles","tabletStyles","rtl","dir","containerStyle","container","flexRowReverse","onPress","source","emoji","label","selected","labelSelected","color","create","alignItems","flex","flexDirection","height","width","marginLeft","fontSize","marginRight","fontWeight","borderRadius","maxWidth","marginTop","alignSelf","textAlign"],"mappings":"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","sourcesContent":["import {\n  View,\n  Image,\n  TouchableWithoutFeedback,\n  StyleSheet,\n  Text,\n} from 'react-native';\nimport React from 'react';\nimport {\n  DimensionWidthType,\n  useDimensionWidthType,\n} from '../hooks/useWindowDimensions';\nimport GlobalStyle from '../styles';\nimport i18n from '../translation';\nimport { useTheme } from '../contexts/theme';\n\ntype Props = {\n  source?: number;\n  onPress: () => void;\n  selected: boolean;\n  label: string;\n};\n\nconst SmileyIcon = (props: Props) => {\n  const { fontColor } = useTheme();\n  const dimensionWidthType = useDimensionWidthType();\n  const isPhone = dimensionWidthType === DimensionWidthType.phone;\n  const styles = isPhone ? phoneStyles : tabletStyles;\n  const rtl = i18n.dir() === 'rtl';\n  const containerStyle = isPhone\n    ? [styles.container, rtl && GlobalStyle.flexRowReverse]\n    : styles.container;\n\n  return (\n    <TouchableWithoutFeedback onPress={props.onPress}>\n      <View style={containerStyle}>\n        {props.source ? (\n          <>\n            <Image\n              resizeMode=\"contain\"\n              style={styles.emoji}\n              source={props.source}\n            />\n            <Text\n              style={[\n                styles.label,\n                props.selected ? styles.labelSelected : {},\n                { color: fontColor },\n              ]}\n            >\n              {props.label}\n            </Text>\n          </>\n        ) : null}\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\nexport default SmileyIcon;\n\nconst phoneStyles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    flex: 1,\n    flexDirection: 'row',\n    height: 65,\n  },\n  emoji: {\n    height: 51,\n    width: 51,\n  },\n  label: {\n    marginLeft: 20,\n    fontSize: 17,\n    marginRight: 20,\n  },\n  labelSelected: {\n    fontWeight: '500',\n  },\n});\n\nconst tabletStyles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    borderRadius: 50,\n    flex: 1,\n    maxWidth: 70,\n  },\n  emoji: {\n    height: 68,\n    marginTop: 20,\n    width: 68,\n  },\n  label: {\n    alignSelf: 'center',\n    marginTop: 11,\n    textAlign: 'center',\n  },\n  labelSelected: {},\n});\n"]}