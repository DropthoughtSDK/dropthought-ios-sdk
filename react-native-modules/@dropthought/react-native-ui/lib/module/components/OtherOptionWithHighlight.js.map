{"version":3,"sources":["OtherOptionWithHighlight.tsx"],"names":["React","StyleSheet","TextInput","View","Text","Platform","GlobalStyles","Colors","QuestionContentTextSize","i18n","OptionWithHighlight","useDimensionWidthType","useTheme","useFocus","onBlur","onFocus","isFocused","setIsFocused","useState","onFocusHandler","useCallback","onBlurHandler","OtherOptionWithHighlightProps","props","id","checked","textValue","onChangeValue","checkedColor","fontColor","dimensionWidthType","inputRef","useRef","value","trim","length","focusProps","onPressHandler","current","focus","onChangeTextHandler","text","rtl","dir","textInput","styles","textInputContainer","flexRowReverse","otherText","color","checkedOtherText","t","textAlignRight","borderBottomColor","inputPlaceholder","transparent","container","create","paddingBottom","paddingTop","fontWeight","marginHorizontal","flex","fontStyle","letterSpacing","textAlign","textAlignVertical","borderBottomWidth","select","ios","paddingVertical","alignItems","flexDirection"],"mappings":";;AAAA;AACA;AACA;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,IAAhC,EAAsCC,IAAtC,EAA4CC,QAA5C,QAA4D,cAA5D;AAEA,OAAOC,YAAP,IAAuBC,MAAvB,EAA+BC,uBAA/B,QAA8D,WAA9D;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,mBAAP,MAEO,uBAFP;AAGA,SAASC,qBAAT,QAAsC,8BAAtC;AACA,SAASC,QAAT,QAAyB,mBAAzB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,MAAD,EAAqBC,OAArB,KAA6C;AAC5D,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BjB,KAAK,CAACkB,QAAN,CAAe,KAAf,CAAlC;AACA,QAAMC,cAAc,GAAGnB,KAAK,CAACoB,WAAN,CAAkB,MAAM;AAC7CL,IAAAA,OAAO,IAAIA,OAAO,EAAlB;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAHsB,EAGpB,CAACF,OAAD,CAHoB,CAAvB;AAIA,QAAMM,aAAa,GAAGrB,KAAK,CAACoB,WAAN,CAAkB,MAAM;AAC5CN,IAAAA,MAAM,IAAIA,MAAM,EAAhB;AACAG,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAHqB,EAGnB,CAACH,MAAD,CAHmB,CAAtB;AAIA,SAAO;AACLE,IAAAA,SADK;AAELD,IAAAA,OAAO,EAAEI,cAFJ;AAGLL,IAAAA,MAAM,EAAEO;AAHH,GAAP;AAKD,CAfD;;AAyBA,SAASC,6BAAT,CAAuCC,KAAvC,EAAqD;AACnD,QAAM;AAAEC,IAAAA,EAAF;AAAMC,IAAAA,OAAN;AAAeC,IAAAA,SAAf;AAA0BC,IAAAA,aAA1B;AAAyCC,IAAAA;AAAzC,MAA0DL,KAAhE;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAgBjB,QAAQ,EAA9B;AAEA,QAAMkB,kBAAkB,GAAGnB,qBAAqB,EAAhD;AACA,QAAMoB,QAAQ,GAAG/B,KAAK,CAACgC,MAAN,CAAwB,IAAxB,CAAjB,CALmD,CAOnD;;AACA,QAAMb,cAAc,GAAG,MAAM;AAC3BQ,IAAAA,aAAa,CAACH,EAAD,EAAK;AAChBS,MAAAA,KAAK,EAAEP,SADS;AAEhBD,MAAAA,OAAO,EAAE;AAFO,KAAL,CAAb;AAID,GALD,CARmD,CAenD;;;AACA,QAAMJ,aAAa,GAAG,MAAM;AAC1B,QAAI,CAACK,SAAD,IAAcA,SAAS,CAACQ,IAAV,GAAiBC,MAAjB,IAA2B,CAA7C,EAAgD;AAC9CR,MAAAA,aAAa,CAACH,EAAD,EAAK;AAChBS,QAAAA,KAAK,EAAE,EADS;AAEhBR,QAAAA,OAAO,EAAE;AAFO,OAAL,CAAb;AAID;AACF,GAPD;;AAQA,QAAM;AAAET,IAAAA,SAAF;AAAa,OAAGoB;AAAhB,MAA+BvB,QAAQ,CAACQ,aAAD,EAAgBF,cAAhB,CAA7C,CAxBmD,CA0BnD;;AACA,QAAMkB,cAAc,GAAG,MAAM;AAC3B,QAAIN,QAAQ,CAACO,OAAT,IAAoB,CAACb,OAAzB,EAAkC;AAChCM,MAAAA,QAAQ,CAACO,OAAT,CAAiBC,KAAjB;AACD,KAFD,MAEO;AACL;AACAZ,MAAAA,aAAa,CAACH,EAAD,EAAK;AAChBS,QAAAA,KAAK,EAAEP,SADS;AAEhBD,QAAAA,OAAO,EAAE,CAACA;AAFM,OAAL,CAAb;AAID;AACF,GAVD,CA3BmD,CAuCnD;;;AACA,QAAMe,mBAAmB,GAAIC,IAAD,IAC1Bd,aAAa,IACbA,aAAa,CAACH,EAAD,EAAK;AAChBC,IAAAA,OAAO,EAAE,IADO;AAEhBQ,IAAAA,KAAK,EAAEQ;AAFS,GAAL,CAFf;;AAOA,QAAMC,GAAG,GAAGjC,IAAI,CAACkC,GAAL,OAAe,KAA3B;AAEA,QAAMC,SAAS,gBACb,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE,CAACC,MAAM,CAACC,kBAAR,EAA4BJ,GAAG,IAAIpC,YAAY,CAACyC,cAAhD;AADT,kBAGE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE,CACLF,MAAM,CAACG,SADF,EAEL;AAAEC,MAAAA,KAAK,EAAEpB;AAAT,KAFK,EAGLJ,OAAO,GAAGoB,MAAM,CAACK,gBAAV,GAA6B,EAH/B,EAIL1C,uBAAuB,CAACsB,kBAAD,CAJlB;AADT,KAQGrB,IAAI,CAAC0C,CAAL,CAAO,qBAAP,CARH,CAHF,eAaE,oBAAC,SAAD;AACE,IAAA,GAAG,EAAEpB,QADP;AAEE,IAAA,KAAK,EAAE,CACLc,MAAM,CAACD,SADF,EAEL;AAAEK,MAAAA,KAAK,EAAEpB;AAAT,KAFK,EAGLa,GAAG,IAAIpC,YAAY,CAAC8C,cAHf,EAILpC,SAAS,GACL;AACEqC,MAAAA,iBAAiB,EAAEzB;AADrB,KADK,GAIL,EARC,EASLpB,uBAAuB,CAACsB,kBAAD,CATlB,CAFT;AAaE,IAAA,WAAW,EAAErB,IAAI,CAAC0C,CAAL,CAAO,0BAAP,CAbf;AAcE,IAAA,oBAAoB,EAAE5C,MAAM,CAAC+C,gBAd/B;AAeE,IAAA,YAAY,EAAEd,mBAfhB;AAgBE,IAAA,qBAAqB,EAAEjC,MAAM,CAACgD,WAhBhC;AAiBE,IAAA,cAAc,EAAE3B,YAjBlB;AAkBE,IAAA,KAAK,EAAEF,SAlBT;AAmBE,IAAA,SAAS,EAAE;AAnBb,KAoBMU,UApBN,EAbF,CADF;AAuCA,sBACE,oBAAC,mBAAD,eACMb,KADN;AAEE,IAAA,OAAO,EAAEc,cAFX;AAGE,IAAA,KAAK,EAAEO,SAHT;AAIE,IAAA,cAAc,EAAEC,MAAM,CAACW;AAJzB,KADF;AAQD;;AAED,MAAMX,MAAM,GAAG5C,UAAU,CAACwD,MAAX,CAAkB;AAC/BD,EAAAA,SAAS,EAAE;AACTE,IAAAA,aAAa,EAAE,CADN;AAETC,IAAAA,UAAU,EAAE;AAFH,GADoB;AAK/BX,EAAAA,SAAS,EAAE;AACTY,IAAAA,UAAU,EAAE,QADH;AAETC,IAAAA,gBAAgB,EAAE;AAFT,GALoB;AAS/BX,EAAAA,gBAAgB,EAAE;AAChBU,IAAAA,UAAU,EAAE;AADI,GATa;AAY/BhB,EAAAA,SAAS,EAAE;AACTkB,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,SAAS,EAAE,QAFF;AAGTH,IAAAA,UAAU,EAAE,QAHH;AAITI,IAAAA,aAAa,EAAE,CAJN;AAKTC,IAAAA,SAAS,EAAE,MALF;AAMTC,IAAAA,iBAAiB,EAAE,QANV;AAOTC,IAAAA,iBAAiB,EAAE,CAPV;AAQTd,IAAAA,iBAAiB,EAAE9C,MAAM,CAAC+C,gBARjB;AAST,OAAGjD,QAAQ,CAAC+D,MAAT,CAAgB;AACjBC,MAAAA,GAAG,EAAE;AACHC,QAAAA,eAAe,EAAE;AADd;AADY,KAAhB;AATM,GAZoB;AA2B/BxB,EAAAA,kBAAkB,EAAE;AAClBgB,IAAAA,IAAI,EAAE,CADY;AAElBS,IAAAA,UAAU,EAAE,QAFM;AAGlBC,IAAAA,aAAa,EAAE;AAHG;AA3BW,CAAlB,CAAf;AAkCA,eAAelD,6BAAf","sourcesContent":["/**\n * @description Option with a TextInput, this is for other option in multi-choice/single-choice question\n */\nimport * as React from 'react';\nimport { StyleSheet, TextInput, View, Text, Platform } from 'react-native';\n\nimport GlobalStyles, { Colors, QuestionContentTextSize } from '../styles';\nimport i18n from '../translation';\nimport OptionWithHighlight, {\n  Props as OptionWithHighlightProps,\n} from './OptionWithHighlight';\nimport { useDimensionWidthType } from '../hooks/useWindowDimensions';\nimport { useTheme } from '../contexts/theme';\n\nconst useFocus = (onBlur: () => void, onFocus: () => void) => {\n  const [isFocused, setIsFocused] = React.useState(false);\n  const onFocusHandler = React.useCallback(() => {\n    onFocus && onFocus();\n    setIsFocused(true);\n  }, [onFocus]);\n  const onBlurHandler = React.useCallback(() => {\n    onBlur && onBlur();\n    setIsFocused(false);\n  }, [onBlur]);\n  return {\n    isFocused,\n    onFocus: onFocusHandler,\n    onBlur: onBlurHandler,\n  };\n};\n\ntype Props = OptionWithHighlightProps & {\n  textValue: string | undefined;\n  onChangeValue: (\n    id: any,\n    value: { checked: boolean; value: string | undefined }\n  ) => void;\n};\n\nfunction OtherOptionWithHighlightProps(props: Props) {\n  const { id, checked, textValue, onChangeValue, checkedColor } = props;\n  const { fontColor } = useTheme();\n\n  const dimensionWidthType = useDimensionWidthType();\n  const inputRef = React.useRef<TextInput>(null);\n\n  // return checked as true when focus\n  const onFocusHandler = () => {\n    onChangeValue(id, {\n      value: textValue,\n      checked: true,\n    });\n  };\n\n  // return checked as false, if the textValue is empty\n  const onBlurHandler = () => {\n    if (!textValue || textValue.trim().length <= 0) {\n      onChangeValue(id, {\n        value: '',\n        checked: false,\n      });\n    }\n  };\n  const { isFocused, ...focusProps } = useFocus(onBlurHandler, onFocusHandler);\n\n  // when the option is pressed, call focus if current checked is false\n  const onPressHandler = () => {\n    if (inputRef.current && !checked) {\n      inputRef.current.focus();\n    } else {\n      // toggle checked value when pressing\n      onChangeValue(id, {\n        value: textValue,\n        checked: !checked,\n      });\n    }\n  };\n\n  // when text input is changed, return the text\n  const onChangeTextHandler = (text: string) =>\n    onChangeValue &&\n    onChangeValue(id, {\n      checked: true,\n      value: text,\n    });\n\n  const rtl = i18n.dir() === 'rtl';\n\n  const textInput = (\n    <View\n      style={[styles.textInputContainer, rtl && GlobalStyles.flexRowReverse]}\n    >\n      <Text\n        style={[\n          styles.otherText,\n          { color: fontColor },\n          checked ? styles.checkedOtherText : {},\n          QuestionContentTextSize[dimensionWidthType],\n        ]}\n      >\n        {i18n.t('survey:other-option')}\n      </Text>\n      <TextInput\n        ref={inputRef}\n        style={[\n          styles.textInput,\n          { color: fontColor },\n          rtl && GlobalStyles.textAlignRight,\n          isFocused\n            ? {\n                borderBottomColor: checkedColor,\n              }\n            : {},\n          QuestionContentTextSize[dimensionWidthType],\n        ]}\n        placeholder={i18n.t('survey:other-placeholder')}\n        placeholderTextColor={Colors.inputPlaceholder}\n        onChangeText={onChangeTextHandler}\n        underlineColorAndroid={Colors.transparent}\n        selectionColor={checkedColor}\n        value={textValue}\n        maxLength={50}\n        {...focusProps}\n      />\n    </View>\n  );\n\n  return (\n    <OptionWithHighlight\n      {...props}\n      onPress={onPressHandler}\n      title={textInput}\n      containerStyle={styles.container}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingBottom: 0,\n    paddingTop: 0,\n  },\n  otherText: {\n    fontWeight: 'normal',\n    marginHorizontal: 12,\n  },\n  checkedOtherText: {\n    fontWeight: '500',\n  },\n  textInput: {\n    flex: 1,\n    fontStyle: 'normal',\n    fontWeight: 'normal',\n    letterSpacing: 0,\n    textAlign: 'left',\n    textAlignVertical: 'center',\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.inputPlaceholder,\n    ...Platform.select({\n      ios: {\n        paddingVertical: 13,\n      },\n    }),\n  },\n  textInputContainer: {\n    flex: 1,\n    alignItems: 'center',\n    flexDirection: 'row',\n  },\n});\n\nexport default OtherOptionWithHighlightProps;\n"]}