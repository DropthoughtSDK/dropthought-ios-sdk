{"version":3,"sources":["MultiChoiceQuestion.tsx"],"names":["React","PureComponent","View","StyleSheet","last","MandatoryTitle","OptionWithHighlight","OtherOptionWithHighlight","GlobalStyles","getOptionsFromQuestion","getInitialSelectedValuesFromFeedbackProps","options","feedback","otherText","values","map","answers","forEach","answer","Number","isInteger","length","MultiChoiceQuestion","constructor","props","question","onChangeValueHandler","bind","onOptionPressHandler","state","onFeedback","questionId","value","index","isOther","undefined","filter","type","otherFlag","setState","newValue","checked","renderOptions","title","option","themeColor","render","questionContainer","forgot","styles","create","marginBottom"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { last } from 'ramda';\n\nimport MandatoryTitle from './MandatoryTitle';\nimport OptionWithHighlight from './OptionWithHighlight';\nimport OtherOptionWithHighlight from './OtherOptionWithHighlight';\nimport GlobalStyles from '../styles';\nimport { getOptionsFromQuestion } from '../utils/data';\nimport type { Question, Option, Feedback as OriginFeedback } from '../data';\n\ntype Feedback = OriginFeedback & {\n  answers: (string | number)[];\n};\n\nconst getInitialSelectedValuesFromFeedbackProps = (\n  options: Option[],\n  feedback: Feedback\n): {\n  values: boolean[];\n  otherText: string | undefined;\n} => {\n  let otherText = '';\n  // default: selected false for each options\n  let values = options.map(() => false);\n\n  // if feedback has answers, turn the checked to true\n  if (feedback && feedback.answers) {\n    feedback.answers.forEach((answer) => {\n      // if the answer is a number type, turn the corresponding value's checked to true\n      if (typeof answer === 'number' && Number.isInteger(answer)) {\n        values[answer] = true;\n      } else {\n        // if the strValue is not a number type,\n        // it is for other label, always the last of the values\n        values[values.length - 1] = true;\n        // @ts-ignore\n        otherText = answer;\n      }\n    });\n  }\n  return { values, otherText };\n};\n\ntype Props = {\n  question: Question;\n  onFeedback: (feedback: Feedback) => void;\n  forgot: boolean;\n  feedback: Feedback;\n  themeColor: string;\n};\n\ntype State = {\n  values: boolean[];\n  options: Option[];\n  otherText: string | undefined;\n};\n\nclass MultiChoiceQuestion extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    const options = getOptionsFromQuestion(props.question);\n\n    this.onChangeValueHandler = this.onChangeValueHandler.bind(this);\n    this.onOptionPressHandler = this.onOptionPressHandler.bind(this);\n    const { values, otherText } = getInitialSelectedValuesFromFeedbackProps(\n      options,\n      props.feedback\n    );\n\n    this.state = {\n      values,\n      options,\n      otherText,\n    };\n  }\n\n  feedback(values: boolean[], otherText: string | undefined) {\n    this.props.onFeedback({\n      questionId: this.props.question.questionId,\n      // @ts-ignore\n      answers: values\n        .map((value, index) => {\n          // only return the answer if checked\n          if (value) {\n            // for 'other option', return the text\n            if (this.state.options[index].isOther) {\n              return otherText;\n            }\n            return index;\n          }\n          return undefined;\n        })\n        .filter((value) => value !== undefined),\n      type: 'multiChoice',\n\n      // otherFlag if the last option is other type and the last values is true and otherText is not undefined\n      otherFlag:\n        last(this.state.options)?.isOther &&\n        last(values) &&\n        otherText !== undefined,\n    });\n    this.setState({\n      values: values,\n      otherText,\n    });\n  }\n\n  onOptionPressHandler(index: number) {\n    // copy the values, and toggle the checked value\n    let values = [...this.state.values];\n    values[index] = !this.state.values[index];\n\n    this.feedback(values, this.state.otherText);\n  }\n\n  onChangeValueHandler(\n    index: number,\n    newValue: {\n      value: string | undefined;\n      checked: boolean;\n    }\n  ) {\n    // copy the values, and set the value\n    let values = [...this.state.values];\n    values[index] = newValue.checked;\n\n    // DK-864, if \"other\" is not selected, reset the other input's value to ''\n    this.feedback(values, newValue.checked ? newValue.value : '');\n  }\n\n  renderOptions() {\n    return this.state.options.map(({ title: option, isOther }, index) => {\n      if (isOther) {\n        return (\n          <OtherOptionWithHighlight\n            key={index}\n            id={index}\n            textValue={this.state.otherText}\n            checked={this.state.values[index]}\n            checkedColor={this.props.themeColor}\n            title={option}\n            type=\"checkbox\"\n            onPress={this.onOptionPressHandler}\n            onChangeValue={this.onChangeValueHandler}\n          />\n        );\n      }\n\n      return (\n        <OptionWithHighlight\n          key={index}\n          id={index}\n          checked={this.state.values[index]}\n          checkedColor={this.props.themeColor}\n          title={option}\n          type=\"checkbox\"\n          onPress={this.onOptionPressHandler}\n        />\n      );\n    });\n  }\n\n  render() {\n    return (\n      <View style={GlobalStyles.questionContainer}>\n        <MandatoryTitle\n          forgot={this.props.forgot}\n          question={this.props.question}\n        />\n        <View style={styles.title} />\n        {this.renderOptions()}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  title: {\n    marginBottom: 20,\n  },\n});\n\nexport default MultiChoiceQuestion;\n"]}