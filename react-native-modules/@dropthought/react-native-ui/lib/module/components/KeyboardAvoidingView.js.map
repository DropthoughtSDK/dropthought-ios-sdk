{"version":3,"sources":["KeyboardAvoidingView.js"],"names":["React","View","TextInput","StyleSheet","Platform","Keyboard","UIManager","findNodeHandle","ScrollView","debounce","OS","setLayoutAnimationEnabledExperimental","callAll","fns","args","forEach","fn","getKeyboardExtraHeight","select","android","default","useKeyboardListener","keyboardChangeHandler","useEffect","keyboardEvents","name","show","subscriptions","map","eventInfo","addListener","event","cleanup","subscription","remove","getCurrentlyFocusedField","State","currentlyFocusedInput","currentlyFocusedField","useKeyboardAvoidingFocusedInputView","parentViewRef","extraAvoidingSpace","insetBottom","parentViewLayoutRef","useRef","contentOffsetYRef","keyboardEndCoordinatesRef","isKeyboardShowingRef","keyboardHeight","setKeyboardHeight","useState","keyboardHeightHandler","useCallback","current","endCoordinates","height","updateOffset","viewIsDescendantOf","isDescendant","measureInWindow","x","y","width","screenHeight","screenY","keyboardScreenY","parentViewTopDistance","currentlyFocusedFieldBottomY","topIsCoverd","bottomIsCoverd","offset","scrollTo","animated","handleKeyboardChange","handleScrollViewContentSizeChange","contentWidth","contentHeight","handleScrollViewScroll","Math","max","nativeEvent","contentOffset","handleScrollViewLayout","layout","KeyboardAvoidingView","children","style","contentContainerStyle","props","viewRef","compose","styles","bottom","KeyboardAvoidingScrollViewForwardRef","onLayout","onContentSizeChange","onScroll","ref","scrollRef","node","hasOwnProperty","flex","paddingBottom","KeyboardAvoidingScrollView","forwardRef","create"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  TextInput,\n  StyleSheet,\n  Platform,\n  Keyboard,\n  UIManager,\n  findNodeHandle,\n  ScrollView,\n} from 'react-native';\nimport debounce from 'lodash/debounce';\n\nif (Platform.OS === 'android') {\n  if (UIManager.setLayoutAnimationEnabledExperimental) {\n    UIManager.setLayoutAnimationEnabledExperimental(true);\n  }\n}\n\nconst callAll =\n  (...fns) =>\n  (...args) =>\n    fns.forEach((fn) => typeof fn === 'function' && fn(...args));\n\nconst getKeyboardExtraHeight = () => {\n  return Platform.select({\n    // it looks that in android, it didn't consider the suggestion box of the keyboard\n    android: 40,\n    default: 0,\n  });\n};\n\nexport const useKeyboardListener = (keyboardChangeHandler = () => {}) => {\n  // keyboard change effect\n  React.useEffect(() => {\n    // subscribe to these keyboard events\n    let keyboardEvents = Platform.select({\n      default: [\n        { name: 'keyboardWillShow', show: true },\n        { name: 'keyboardWillHide', show: false },\n      ],\n      android: [\n        { name: 'keyboardDidShow', show: true },\n        { name: 'keyboardDidHide', show: false },\n      ],\n    });\n\n    let subscriptions = keyboardEvents.map((eventInfo) => {\n      return Keyboard.addListener(eventInfo.name, (event) =>\n        keyboardChangeHandler(event, eventInfo.show)\n      );\n    });\n\n    return function cleanup() {\n      subscriptions.forEach((subscription) => {\n        subscription.remove();\n      });\n    };\n  }, [keyboardChangeHandler]);\n};\n\nconst getCurrentlyFocusedField = () => {\n  return TextInput.State.currentlyFocusedInput\n    ? findNodeHandle(TextInput.State.currentlyFocusedInput())\n    : TextInput.State.currentlyFocusedField();\n};\n\nexport const useKeyboardAvoidingFocusedInputView = (\n  parentViewRef,\n  extraAvoidingSpace = 0,\n  insetBottom = 0\n) => {\n  const parentViewLayoutRef = React.useRef();\n  const contentOffsetYRef = React.useRef(0);\n  const keyboardEndCoordinatesRef = React.useRef();\n  const isKeyboardShowingRef = React.useRef(false);\n\n  const [keyboardHeight, setKeyboardHeight] = React.useState(0);\n  const keyboardHeightHandler = React.useCallback(\n    (event, show) => {\n      keyboardEndCoordinatesRef.current = event.endCoordinates;\n      isKeyboardShowingRef.current = show;\n      setKeyboardHeight(\n        show\n          ? event.endCoordinates.height -\n              (Platform.OS === 'android' ? 0 : insetBottom) +\n              getKeyboardExtraHeight()\n          : 0\n      );\n    },\n    [insetBottom]\n  );\n  useKeyboardListener(keyboardHeightHandler);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const updateOffset = React.useCallback(\n    debounce(() => {\n      if (!parentViewRef.current) {\n        return;\n      }\n      const currentlyFocusedField = getCurrentlyFocusedField();\n      if (currentlyFocusedField) {\n        // here we want to check if the focused input is \"within\" this view\n        // if it is not this view, do nothing (it could be a un-focused screen)\n        UIManager.viewIsDescendantOf(\n          currentlyFocusedField,\n          findNodeHandle(parentViewRef.current),\n          (isDescendant) => {\n            if (isDescendant) {\n              // measure the input's layout, compute the offset to the keyboard\n              UIManager.measureInWindow(\n                currentlyFocusedField,\n                (x, y, width, height) => {\n                  if (\n                    !parentViewLayoutRef.current ||\n                    !keyboardEndCoordinatesRef.current\n                  ) {\n                    return;\n                  }\n                  const screenHeight =\n                    keyboardEndCoordinatesRef.current.screenY +\n                    keyboardEndCoordinatesRef.current.height;\n                  const keyboardScreenY =\n                    keyboardEndCoordinatesRef.current.screenY -\n                    getKeyboardExtraHeight();\n                  const parentViewTopDistance =\n                    screenHeight -\n                    insetBottom -\n                    parentViewLayoutRef.current.height;\n                  const currentlyFocusedFieldBottomY =\n                    y + height + extraAvoidingSpace;\n                  const topIsCoverd = parentViewTopDistance > y;\n                  const bottomIsCoverd =\n                    currentlyFocusedFieldBottomY > keyboardScreenY;\n                  // can see the field completely\n                  if (!topIsCoverd && !bottomIsCoverd) {\n                    return;\n                  }\n                  const offset =\n                    currentlyFocusedFieldBottomY +\n                    contentOffsetYRef.current -\n                    keyboardScreenY;\n                  if (offset >= 0) {\n                    parentViewRef.current.scrollTo({\n                      x: 0,\n                      y: offset,\n                      animated: true,\n                    });\n                  }\n                }\n              );\n            }\n          }\n        );\n      }\n    }, 100),\n    [extraAvoidingSpace, insetBottom, parentViewRef]\n  );\n\n  const handleKeyboardChange = React.useCallback(\n    (event, show) => {\n      if (isKeyboardShowingRef.current) {\n        updateOffset(event);\n      }\n    },\n    [updateOffset]\n  );\n  useKeyboardListener(handleKeyboardChange);\n\n  const handleScrollViewContentSizeChange = (contentWidth, contentHeight) => {\n    if (isKeyboardShowingRef.current) {\n      updateOffset();\n    }\n  };\n\n  const handleScrollViewScroll = (event) => {\n    contentOffsetYRef.current = Math.max(event.nativeEvent.contentOffset.y, 0);\n  };\n\n  const handleScrollViewLayout = (event) => {\n    parentViewLayoutRef.current = event.nativeEvent.layout;\n  };\n\n  return {\n    keyboardHeight,\n    handleScrollViewLayout,\n    handleScrollViewContentSizeChange,\n    handleScrollViewScroll,\n  };\n};\n\n/**\n * @type {React.FunctionComponent<KeyboardAvoidingProps & ViewProps>}\n * @param {KeyboardAvoidingProps & ViewProps} param0\n */\nconst KeyboardAvoidingView = ({\n  children,\n  style,\n  contentContainerStyle,\n  extraAvoidingSpace = 0,\n  ...props\n}) => {\n  const viewRef = React.useRef();\n  const { keyboardHeight } = useKeyboardAvoidingFocusedInputView(\n    viewRef,\n    extraAvoidingSpace\n  );\n\n  return (\n    <View ref={viewRef} style={style} {...props}>\n      <View\n        style={StyleSheet.compose(styles.contentContainerStyle, {\n          bottom: keyboardHeight,\n        })}\n      >\n        {children}\n      </View>\n    </View>\n  );\n};\n\n/**\n * @param {KeyboardAvoidingProps & ScrollViewProps} param0\n * @param {*} ref\n */\nconst KeyboardAvoidingScrollViewForwardRef = (\n  {\n    children,\n    style,\n    contentContainerStyle,\n    extraAvoidingSpace = 0,\n    onLayout,\n    onContentSizeChange,\n    onScroll,\n    insetBottom,\n    ...props\n  },\n  ref\n) => {\n  const scrollRef = React.useRef(null);\n\n  const {\n    keyboardHeight,\n    handleScrollViewLayout,\n    handleScrollViewContentSizeChange,\n    handleScrollViewScroll,\n  } = useKeyboardAvoidingFocusedInputView(\n    scrollRef,\n    extraAvoidingSpace,\n    insetBottom\n  );\n\n  return (\n    <ScrollView\n      ref={(node) => {\n        scrollRef.current = node;\n        if (ref && ref.hasOwnProperty('current')) {\n          ref.current = node;\n        } else if (typeof ref === 'function') {\n          ref(node);\n        }\n      }}\n      style={StyleSheet.compose(style, {\n        flex: 1,\n      })}\n      contentContainerStyle={StyleSheet.compose(contentContainerStyle, {\n        paddingBottom:\n          (contentContainerStyle?.paddingBottom ?? 0) + keyboardHeight,\n      })}\n      onLayout={callAll(onLayout, handleScrollViewLayout)}\n      onContentSizeChange={callAll(\n        onContentSizeChange,\n        handleScrollViewContentSizeChange\n      )}\n      onScroll={callAll(onScroll, handleScrollViewScroll)}\n      {...props}\n      scrollEventThrottle={16}\n    >\n      {children}\n    </ScrollView>\n  );\n};\n\n/** @type {React.FunctionComponent<KeyboardAvoidingProps & ScrollViewProps>} */\nexport const KeyboardAvoidingScrollView = React.forwardRef(\n  KeyboardAvoidingScrollViewForwardRef\n);\n\nconst styles = StyleSheet.create({\n  contentContainerStyle: {\n    height: '100%',\n  },\n});\n\nexport default KeyboardAvoidingView;\n\n/**\n * @typedef {object} KeyboardAvoidingProps\n * @property {ViewStyle} contentContainerStyle\n * @property {ViewStyle} style\n * @property {number=} extraAvoidingSpace - optional, the default behavior of this keyboard avoiding is to avoid the whole input box, but if you wish to have extra space to avoid\n */\n\n/**\n * @typedef {import('react-native').StyleProp<import('react-native').ViewStyle>} ViewStyle\n * @typedef {import('react-native').ViewProps} ViewProps\n * @typedef {import('react-native').ScrollViewProps} ScrollViewProps\n */\n"]}