{"version":3,"sources":["SliderRatingQuestion.tsx"],"names":["React","View","StyleSheet","Text","TouchableHighlight","Platform","MandatoryTitle","GlobalStyle","Colors","isNil","i18n","DimensionWidthType","useDimensionWidthType","useTheme","COLOR_SCHEMES","MIN_VALUE","NPS_MIN_VALUE","getInitialSelectedValue","feedback","answers","parseInt","undefined","getLabelText","isPhone","question","maximumValue","valueData","labelText","type","options","length","SliderRatingQuestion","onFeedback","forgot","themeColor","colorScheme","fontColor","backgroundColor","themeBackgroundColor","value","setValue","useState","scale","dimensionWidthType","phone","getBackgroundColorStyle","selected","darkMode","resizeMode","styles","backgroundDark","getSliderIndicator","Array","keys","map","index","toString","questionId","backgroundPhone","backgroundTablet","dark","label","color","selectedLabel","getWidthStyle","width","maxWidth","marginTop","paddingHorizontal","rtl","dir","questionContainer","marginBottom25","vertical","flexRowReverse","line","horizontal","marginTop10","memo","create","white","borderColor","sliderShadowColor","borderRadius","elevation","height","justifyContent","shadowColor","black","shadowOffset","shadowOpacity","shadowRadius","marginBottom","sliderBackgroundDark","flex","flexDirection","select","android","textAlign","top","marginBottom10","fontSize"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  StyleSheet,\n  Text,\n  TouchableHighlight,\n  Platform,\n} from 'react-native';\nimport MandatoryTitle from './MandatoryTitle';\nimport GlobalStyle, { Colors } from '../styles';\nimport { isNil } from 'ramda';\nimport i18n from '../translation';\nimport {\n  DimensionWidthType,\n  useDimensionWidthType,\n} from '../hooks/useWindowDimensions';\nimport { useTheme, COLOR_SCHEMES } from '../contexts/theme';\nimport type {\n  Feedback as OriginFeedback,\n  Question as OriginQuestion,\n} from '../data';\n\ntype Feedback = OriginFeedback & {\n  answers: string[];\n};\n\ntype Question = OriginQuestion & {\n  options: string[];\n  scale: string;\n};\n\nconst MIN_VALUE = 1;\nconst NPS_MIN_VALUE = 0;\n\nconst getInitialSelectedValue = (feedback: Feedback) => {\n  if (feedback && feedback.answers && !isNil(feedback.answers[0])) {\n    return parseInt(feedback.answers[0], 10);\n  }\n  return undefined;\n};\n\nconst getLabelText = ({\n  isPhone,\n  question,\n  maximumValue,\n  valueData,\n}: {\n  isPhone: boolean;\n  question: Question;\n  maximumValue: number;\n  valueData: number;\n}) => {\n  const labelText = `${\n    valueData + (question.type === 'nps' ? NPS_MIN_VALUE : MIN_VALUE)\n  }`;\n  if (isPhone) {\n    if (valueData === 0) {\n      return `${labelText} - ${question.options[0]}`;\n    }\n    if (valueData === maximumValue - 1) {\n      return `${labelText} - ${question.options[question.options.length - 1]}`;\n    }\n  }\n  return labelText;\n};\n\ntype Props = {\n  question: Question;\n  onFeedback: ({\n    questionId,\n    answers,\n    type,\n  }: {\n    questionId: string;\n    answers: number[];\n    type: string;\n  }) => void;\n  feedback: Feedback;\n  forgot: boolean;\n  themeColor: string;\n};\n\nconst SliderRatingQuestion = ({\n  question,\n  onFeedback,\n  feedback,\n  forgot,\n  themeColor,\n}: Props) => {\n  const {\n    colorScheme,\n    fontColor,\n    backgroundColor: themeBackgroundColor,\n  } = useTheme();\n  const [value, setValue] = React.useState(getInitialSelectedValue(feedback));\n  const maximumValue = parseInt(question.scale, 10);\n\n  const dimensionWidthType = useDimensionWidthType();\n  const isPhone = dimensionWidthType === DimensionWidthType.phone;\n\n  const getBackgroundColorStyle = ({\n    selected,\n    darkMode,\n  }: {\n    selected: boolean;\n    darkMode: boolean;\n  }) => {\n    if (selected) {\n      return {\n        backgroundColor: themeColor,\n        resizeMode: 'contain',\n      };\n    }\n    if (darkMode) {\n      return styles.backgroundDark;\n    }\n    return { backgroundColor: themeBackgroundColor };\n  };\n\n  const getSliderIndicator = () => {\n    return [...Array(maximumValue).keys()].map((valueData, index) => (\n      <TouchableHighlight\n        underlayColor={themeBackgroundColor}\n        key={index.toString()}\n        onPress={() => {\n          onFeedback({\n            questionId: question.questionId,\n            answers: [index],\n            type: question.type,\n          });\n          setValue(index);\n        }}\n      >\n        <View\n          style={[\n            isPhone ? styles.backgroundPhone : styles.backgroundTablet,\n            getBackgroundColorStyle({\n              selected: index === value,\n              darkMode: colorScheme === COLOR_SCHEMES.dark,\n            }),\n          ]}\n        >\n          <Text\n            style={[\n              styles.label,\n              { color: fontColor },\n              index === value ? styles.selectedLabel : {},\n            ]}\n          >\n            {getLabelText({\n              isPhone,\n              question,\n              maximumValue,\n              valueData,\n            })}\n          </Text>\n        </View>\n      </TouchableHighlight>\n    ));\n  };\n\n  const getWidthStyle = () => {\n    let width =\n      (maximumValue / 10.0) * 100 > 100 ? 100 : (maximumValue / 10.0) * 100;\n    return {\n      maxWidth: width + '%',\n      marginTop: 22,\n      paddingHorizontal: 10,\n    };\n  };\n\n  const rtl = i18n.dir() === 'rtl';\n  return (\n    <View style={GlobalStyle.questionContainer}>\n      <MandatoryTitle\n        forgot={forgot}\n        style={styles.marginBottom25}\n        question={question}\n      />\n      {isPhone ? (\n        <View style={[styles.vertical]}>{getSliderIndicator()}</View>\n      ) : (\n        <>\n          <View style={rtl && GlobalStyle.flexRowReverse}>\n            <View style={getWidthStyle()}>\n              <View style={styles.line} />\n              <View\n                style={[styles.horizontal, rtl && GlobalStyle.flexRowReverse]}\n              >\n                {getSliderIndicator()}\n              </View>\n            </View>\n          </View>\n          <View style={rtl && GlobalStyle.flexRowReverse}>\n            <View\n              style={[\n                styles.horizontal,\n                styles.marginTop10,\n                getWidthStyle(),\n                rtl && GlobalStyle.flexRowReverse,\n              ]}\n            >\n              <Text style={styles.options}>{question.options[0]}</Text>\n              <Text style={styles.options}>\n                {question.options[question.options.length - 1]}\n              </Text>\n            </View>\n          </View>\n        </>\n      )}\n    </View>\n  );\n};\n\nexport default React.memo(SliderRatingQuestion);\n\nconst styles = StyleSheet.create({\n  backgroundPhone: {\n    backgroundColor: Colors.white,\n    borderColor: Colors.sliderShadowColor,\n    borderRadius: 2,\n    elevation: 5,\n    height: 33,\n    justifyContent: 'center',\n    shadowColor: Colors.black,\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.16,\n    shadowRadius: 3,\n    width: '100%',\n    marginBottom: 8,\n  },\n  backgroundTablet: {\n    backgroundColor: Colors.white,\n    borderColor: Colors.sliderShadowColor,\n    borderRadius: 1000,\n    elevation: 5,\n    height: 45,\n    justifyContent: 'center',\n    shadowColor: Colors.black,\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    width: 45,\n  },\n  backgroundDark: {\n    backgroundColor: Colors.sliderBackgroundDark,\n  },\n  horizontal: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    width: '100%',\n  },\n  vertical: {\n    flex: 1,\n    justifyContent: 'space-between',\n    width: '100%',\n    ...Platform.select({\n      android: {\n        paddingHorizontal: 7,\n      },\n    }),\n  },\n  label: {\n    textAlign: 'center',\n  },\n  line: {\n    backgroundColor: Colors.sliderShadowColor,\n    height: 1,\n    top: '50%',\n    width: '100%',\n  },\n  marginBottom10: {\n    marginBottom: 10,\n  },\n  marginBottom25: {\n    marginBottom: 25,\n  },\n  marginTop10: {\n    marginTop: 10,\n  },\n  options: {\n    fontSize: 12,\n  },\n  selectedLabel: {\n    color: Colors.white,\n    textAlign: 'center',\n  },\n});\n"]}