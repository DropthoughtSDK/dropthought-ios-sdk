{"version":3,"sources":["SurveyScreenLayout.tsx"],"names":["React","ScrollView","RNScrollView","StyleSheet","Platform","View","findNodeHandle","SurveyPageProvider","QuestionContainer","DefaultSurveyProgressBar","SurveyFooter","DefaultSurveyPageIndicator","KeyboardAvoidingScrollView","GlobalStyle","i18n","useTheme","SurveyProgressBarPosition","FixedBottom","BelowBody","OS","SurveyScreenLayout","props","backgroundColor","pageIndex","survey","SurveyPageIndicator","SurveyProgressBar","surveyProgressBarPosition","scrollViewRef","useRef","validationStarted","setValidationStarted","useState","onValidationStartHandler","useCallback","onValidationFailedHandler","_","targetReg","current","measureLayout","_x","y","scrollTo","x","animated","questions","pages","map","question","questionId","anonymous","surveyProperty","hexCode","surveyProgressBar","dir","flex1","styles","scrollView","scrollViewContentContainer","bodyContent","SurveyScreenLayoutWrapper","noop","undefined","defaultProps","onSubmit","onNextPage","onPrevPage","create","flex","paddingHorizontal","flexGrow","alignItems","paddingBottom","width","maxWidth"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  ScrollView as RNScrollView,\n  StyleSheet,\n  Platform,\n  View,\n  findNodeHandle,\n} from 'react-native';\n\nimport { SurveyPageProvider } from '../contexts/survey-page';\nimport QuestionContainer from './QuestionContainer';\nimport DefaultSurveyProgressBar from './SurveyProgressBar';\nimport SurveyFooter from './SurveyFooter';\nimport DefaultSurveyPageIndicator from '../components/SurveyPageIndicator';\nimport { KeyboardAvoidingScrollView } from '../components/KeyboardAvoidingView';\nimport GlobalStyle from '../styles';\nimport i18n from '../translation';\nimport { useTheme } from '../contexts/theme';\nimport type { Survey, SurveyFeedback } from 'src/data';\n\nexport const SurveyProgressBarPosition = {\n  FixedBottom: 0,\n  BelowBody: 1,\n};\n\nconst ScrollView =\n  Platform.OS === 'ios' ? KeyboardAvoidingScrollView : RNScrollView;\n\ntype Props = {\n  pageIndex: number; //current page index (start from 0)\n  survey: Survey;\n  onSubmit: (surveyFeedback: SurveyFeedback) => void;\n  onNextPage: (nextPageIndex: number) => void;\n  onPrevPage?: () => void;\n  onPageEnter?: () => void;\n  onPageLeave?: () => void;\n  onFeedback?: () => void;\n  SurveyProgressBar?: any;\n  surveyProgressBarPosition?: number;\n  SurveyPageIndicator?: any;\n};\n\nconst SurveyScreenLayout = (props: Props) => {\n  const { backgroundColor } = useTheme();\n  const {\n    pageIndex = 0,\n    survey,\n    SurveyPageIndicator = DefaultSurveyPageIndicator,\n    SurveyProgressBar = DefaultSurveyProgressBar,\n    surveyProgressBarPosition = SurveyProgressBarPosition.FixedBottom,\n  } = props;\n  const scrollViewRef = React.useRef<RNScrollView>(null);\n\n  // when validation start, set the state\n  const [validationStarted, setValidationStarted] = React.useState(false);\n  const onValidationStartHandler = React.useCallback(() => {\n    setValidationStarted(true);\n  }, []);\n\n  // when validation failed, scroll to the ref\n  const onValidationFailedHandler = React.useCallback((_, targetReg) => {\n    if (targetReg && scrollViewRef.current) {\n      targetReg.measureLayout(\n        findNodeHandle(scrollViewRef.current),\n        (_x: number, y: number) => {\n          if (scrollViewRef.current) {\n            scrollViewRef.current.scrollTo({\n              x: 0,\n              y: y,\n              animated: true,\n            });\n          }\n        }\n      );\n    }\n  }, []);\n\n  const questions = survey.pages[pageIndex].questions.map((question) => {\n    return (\n      <QuestionContainer\n        key={question.questionId}\n        anonymous={survey.anonymous}\n        question={question}\n        validationStarted={validationStarted}\n        themeColor={survey.surveyProperty.hexCode}\n      />\n    );\n  });\n\n  const surveyProgressBar = (\n    <SurveyProgressBar\n      survey={survey}\n      pageIndex={pageIndex}\n      rtl={i18n.dir() === 'rtl'}\n    />\n  );\n\n  return (\n    <View style={[GlobalStyle.flex1, { backgroundColor }]}>\n      <SurveyPageIndicator\n        pageIndex={pageIndex}\n        survey={survey}\n        rtl={i18n.dir() === 'rtl'}\n      />\n      {/* @ts-ignore */}\n      <ScrollView\n        // @ts-ignore\n        ref={scrollViewRef}\n        style={[styles.scrollView, { backgroundColor }]}\n        extraAvoidingSpace={30}\n        contentContainerStyle={styles.scrollViewContentContainer}\n      >\n        <View style={styles.bodyContent}>\n          {questions}\n          {/* @ts-ignore */}\n          <SurveyFooter\n            {...props}\n            survey={survey}\n            onValidationFailed={onValidationFailedHandler}\n            onValidationStart={onValidationStartHandler}\n          />\n          {surveyProgressBarPosition === SurveyProgressBarPosition.BelowBody &&\n            surveyProgressBar}\n        </View>\n      </ScrollView>\n      {surveyProgressBarPosition === SurveyProgressBarPosition.FixedBottom &&\n        surveyProgressBar}\n    </View>\n  );\n};\n\nconst SurveyScreenLayoutWrapper = (props: Props) => {\n  return (\n    <SurveyPageProvider>\n      <SurveyScreenLayout {...props} />\n    </SurveyPageProvider>\n  );\n};\n\nexport default SurveyScreenLayoutWrapper;\n\nconst noop = () => undefined;\nSurveyScreenLayout.defaultProps = {\n  pageIndex: 0,\n  onSubmit: noop,\n  onNextPage: noop,\n  onPrevPage: noop,\n};\n\nconst styles = StyleSheet.create({\n  scrollView: {\n    flex: 1,\n    paddingHorizontal: 30,\n  },\n  scrollViewContentContainer: {\n    flexGrow: 1,\n    alignItems: 'center',\n    paddingBottom: 30,\n  },\n\n  // where the questions and submit/page buttons go\n  bodyContent: {\n    width: '100%',\n    flex: 1,\n    maxWidth: 648,\n  },\n});\n"]}