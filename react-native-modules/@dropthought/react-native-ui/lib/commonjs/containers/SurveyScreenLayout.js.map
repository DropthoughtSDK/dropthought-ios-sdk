{"version":3,"sources":["SurveyScreenLayout.tsx"],"names":["SurveyProgressBarPosition","FixedBottom","BelowBody","ScrollView","Platform","OS","KeyboardAvoidingScrollView","RNScrollView","SurveyScreenLayout","props","backgroundColor","pageIndex","survey","SurveyPageIndicator","DefaultSurveyPageIndicator","SurveyProgressBar","DefaultSurveyProgressBar","surveyProgressBarPosition","scrollViewRef","React","useRef","validationStarted","setValidationStarted","useState","onValidationStartHandler","useCallback","onValidationFailedHandler","_","targetReg","current","measureLayout","_x","y","scrollTo","x","animated","questions","pages","map","question","questionId","anonymous","surveyProperty","hexCode","surveyProgressBar","i18n","dir","GlobalStyle","flex1","styles","scrollView","scrollViewContentContainer","bodyContent","SurveyScreenLayoutWrapper","noop","undefined","defaultProps","onSubmit","onNextPage","onPrevPage","StyleSheet","create","flex","paddingHorizontal","flexGrow","alignItems","paddingBottom","width","maxWidth"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  ScrollView as RNScrollView,\n  StyleSheet,\n  Platform,\n  View,\n  findNodeHandle,\n} from 'react-native';\n\nimport { SurveyPageProvider } from '../contexts/survey-page';\nimport QuestionContainer from './QuestionContainer';\nimport DefaultSurveyProgressBar from './SurveyProgressBar';\nimport SurveyFooter from './SurveyFooter';\nimport DefaultSurveyPageIndicator from '../components/SurveyPageIndicator';\nimport { KeyboardAvoidingScrollView } from '../components/KeyboardAvoidingView';\nimport GlobalStyle from '../styles';\nimport i18n from '../translation';\nimport { useTheme } from '../contexts/theme';\nimport type { Survey, SurveyFeedback } from 'src/data';\n\nexport const SurveyProgressBarPosition = {\n  FixedBottom: 0,\n  BelowBody: 1,\n};\n\nconst ScrollView =\n  Platform.OS === 'ios' ? KeyboardAvoidingScrollView : RNScrollView;\n\ntype Props = {\n  pageIndex: number; //current page index (start from 0)\n  survey: Survey;\n  onSubmit: (surveyFeedback: SurveyFeedback) => void;\n  onNextPage: (nextPageIndex: number) => void;\n  onPrevPage?: () => void;\n  onPageEnter?: () => void;\n  onPageLeave?: () => void;\n  onFeedback?: () => void;\n  SurveyProgressBar?: any;\n  surveyProgressBarPosition?: number;\n  SurveyPageIndicator?: any;\n};\n\nconst SurveyScreenLayout = (props: Props) => {\n  const { backgroundColor } = useTheme();\n  const {\n    pageIndex = 0,\n    survey,\n    SurveyPageIndicator = DefaultSurveyPageIndicator,\n    SurveyProgressBar = DefaultSurveyProgressBar,\n    surveyProgressBarPosition = SurveyProgressBarPosition.FixedBottom,\n  } = props;\n  const scrollViewRef = React.useRef<RNScrollView>(null);\n\n  // when validation start, set the state\n  const [validationStarted, setValidationStarted] = React.useState(false);\n  const onValidationStartHandler = React.useCallback(() => {\n    setValidationStarted(true);\n  }, []);\n\n  // when validation failed, scroll to the ref\n  const onValidationFailedHandler = React.useCallback((_, targetReg) => {\n    if (targetReg && scrollViewRef.current) {\n      targetReg.measureLayout(\n        findNodeHandle(scrollViewRef.current),\n        (_x: number, y: number) => {\n          if (scrollViewRef.current) {\n            scrollViewRef.current.scrollTo({\n              x: 0,\n              y: y,\n              animated: true,\n            });\n          }\n        }\n      );\n    }\n  }, []);\n\n  const questions = survey.pages[pageIndex].questions.map((question) => {\n    return (\n      <QuestionContainer\n        key={question.questionId}\n        anonymous={survey.anonymous}\n        question={question}\n        validationStarted={validationStarted}\n        themeColor={survey.surveyProperty.hexCode}\n      />\n    );\n  });\n\n  const surveyProgressBar = (\n    <SurveyProgressBar\n      survey={survey}\n      pageIndex={pageIndex}\n      rtl={i18n.dir() === 'rtl'}\n    />\n  );\n\n  return (\n    <View style={[GlobalStyle.flex1, { backgroundColor }]}>\n      <SurveyPageIndicator\n        pageIndex={pageIndex}\n        survey={survey}\n        rtl={i18n.dir() === 'rtl'}\n      />\n      {/* @ts-ignore */}\n      <ScrollView\n        ref={scrollViewRef}\n        style={[styles.scrollView, { backgroundColor }]}\n        extraAvoidingSpace={30}\n        contentContainerStyle={styles.scrollViewContentContainer}\n      >\n        <View style={styles.bodyContent}>\n          {questions}\n          {/* @ts-ignore */}\n          <SurveyFooter\n            {...props}\n            survey={survey}\n            onValidationFailed={onValidationFailedHandler}\n            onValidationStart={onValidationStartHandler}\n          />\n          {surveyProgressBarPosition === SurveyProgressBarPosition.BelowBody &&\n            surveyProgressBar}\n        </View>\n      </ScrollView>\n      {surveyProgressBarPosition === SurveyProgressBarPosition.FixedBottom &&\n        surveyProgressBar}\n    </View>\n  );\n};\n\nconst SurveyScreenLayoutWrapper = (props: Props) => {\n  return (\n    <SurveyPageProvider>\n      <SurveyScreenLayout {...props} />\n    </SurveyPageProvider>\n  );\n};\n\nexport default SurveyScreenLayoutWrapper;\n\nconst noop = () => undefined;\nSurveyScreenLayout.defaultProps = {\n  pageIndex: 0,\n  onSubmit: noop,\n  onNextPage: noop,\n  onPrevPage: noop,\n};\n\nconst styles = StyleSheet.create({\n  scrollView: {\n    flex: 1,\n    paddingHorizontal: 30,\n  },\n  scrollViewContentContainer: {\n    flexGrow: 1,\n    alignItems: 'center',\n    paddingBottom: 30,\n  },\n\n  // where the questions and submit/page buttons go\n  bodyContent: {\n    width: '100%',\n    flex: 1,\n    maxWidth: 648,\n  },\n});\n"]}