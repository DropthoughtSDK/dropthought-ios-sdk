{"version":3,"sources":["SurveyFooter.tsx"],"names":["noop","undefined","DummyButton","width","firstInvalidQuestionId","page","feedbackState","invalidQuestionId","question","questions","feedback","feedbacksMap","questionId","getFeedbacks","answeredQuestionIds","map","qid","SurveyFooter","props","mandatoryQuestionTitleRefs","dimensionWidthType","rtl","i18n","dir","survey","pageIndex","onPrevPage","onNextPage","onSubmit","onValidationStart","onValidationFailed","lastPage","pageOrder","length","currentPage","pages","surveyId","validatePageFeedbacks","React","useCallback","onNextPressHandler","isValid","nextPageIndex","pageId","feedbacks","onSubmitPressHandler","onBackPressHandler","LeftButtonComponent","Button","themeColor","surveyProperty","hexCode","btnWidth","DimensionWidthType","phone","styles","container","GlobalStyle","flexRowReverse","t","leftBtnContainer","rightBtnContainer","StyleSheet","create","flex","row","justifyContent","marginVertical","memo"],"mappings":"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","sourcesContent":["/**\n * @description a extension UI/UX component of SurveyScreenLayout\n * it displays three buttons:\n *  - Back, displayed when page is > 0\n *  - Next, displayed when page is not end\n *  - Submit, displayed when page is the last page\n * When \"Back\" is pressed, call props.onPrevPage\n * When \"Next\" is pressed,\n *     would check if the answers are valid, and then apply the Skip Logic, get the next page id, call props.onNextPage(nextPageIndex)\n *     or it would call props.onSubmit, when the rule says it should go to end\n * When \"Submit\" is pressed,\n *     would check if the answers are valid, and then call props.onSubmit\n *\n * when the validation process failed, call props.onValidationFailed\n */\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\n\nimport { questionFeedbackValidator, nextPage } from '../utils/data';\n\nimport {\n  DimensionWidthType,\n  useDimensionWidthType,\n} from '../hooks/useWindowDimensions';\nimport Button from '../components/Button';\nimport { useFeedbackState } from '../contexts/feedback';\nimport { useSurveyPageContext } from '../contexts/survey-page';\nimport { GlobalStyle } from '../styles';\nimport i18n from '../translation';\nimport type { Page, Feedback, Survey } from '../data';\n\nconst noop = () => undefined;\n\nconst DummyButton = ({ width }: { width: number }) => (\n  <View style={{ width }} />\n);\n\ntype FeedbackReducerState = any;\n\n/**\n * check if the feedbacks of questions of the page is valid\n * returns the 1st invalid question id or undefined (means all valid)\n */\nconst firstInvalidQuestionId = (\n  page: Page,\n  feedbackState: FeedbackReducerState\n): string | undefined => {\n  let invalidQuestionId;\n  for (const question of page.questions) {\n    const feedback = feedbackState.feedbacksMap[question.questionId];\n    if (!questionFeedbackValidator(question, feedback)) {\n      invalidQuestionId = question.questionId;\n      break;\n    }\n  }\n  return invalidQuestionId;\n};\n\n/**\n * get feedbacks array from feedback state\n */\nconst getFeedbacks = (feedbackState: FeedbackReducerState): Feedback[] => {\n  return feedbackState.answeredQuestionIds.map(\n    (qid: string) => feedbackState.feedbacksMap[qid]\n  );\n};\n\ntype Props = {\n  survey: Survey;\n  pageIndex: number;\n  onPrevPage: () => void;\n  onNextPage: (arg0: number) => void;\n  onSubmit: (arg0: any) => void;\n  onValidationStart: () => void;\n  onValidationFailed: (arg0: string, arg1: any) => void;\n};\n\nconst SurveyFooter = (props: Props) => {\n  const feedbackState = useFeedbackState();\n  const { mandatoryQuestionTitleRefs } = useSurveyPageContext();\n  const dimensionWidthType = useDimensionWidthType();\n  const rtl = i18n.dir() === 'rtl';\n  const {\n    survey,\n    pageIndex = 0,\n    onPrevPage,\n    onNextPage,\n    onSubmit,\n    onValidationStart = noop,\n    onValidationFailed = noop,\n  } = props;\n\n  const lastPage = pageIndex === survey.pageOrder.length - 1;\n  const currentPage = survey.pages[pageIndex];\n  const surveyId = survey.surveyId;\n\n  // check if feedbacks are valid\n  const validatePageFeedbacks = React.useCallback(() => {\n    onValidationStart();\n    const invalidQuestionId = firstInvalidQuestionId(\n      currentPage,\n      feedbackState\n    );\n    // if there's an invalid question, call onValidationFailed\n    if (invalidQuestionId)\n      onValidationFailed(\n        invalidQuestionId,\n        mandatoryQuestionTitleRefs[invalidQuestionId]\n      );\n    return !invalidQuestionId;\n  }, [\n    currentPage,\n    feedbackState,\n    mandatoryQuestionTitleRefs,\n    onValidationStart,\n    onValidationFailed,\n  ]);\n\n  // check if feedbacks are valid, apply the skip-logic rule, only call onNextPage when valid\n  const onNextPressHandler = React.useCallback(() => {\n    const isValid = validatePageFeedbacks();\n    if (isValid) {\n      const nextPageIndex = nextPage(\n        pageIndex,\n        currentPage.pageId,\n        feedbackState.feedbacksMap,\n        survey\n      );\n      if (nextPageIndex === -1) {\n        onSubmit({\n          surveyId,\n          feedbacks: getFeedbacks(feedbackState),\n        });\n      } else {\n        onNextPage(nextPageIndex);\n      }\n    }\n  }, [\n    validatePageFeedbacks,\n    pageIndex,\n    currentPage.pageId,\n    feedbackState,\n    survey,\n    onSubmit,\n    onNextPage,\n    surveyId,\n  ]);\n\n  const onSubmitPressHandler = React.useCallback(() => {\n    const isValid = validatePageFeedbacks();\n    if (isValid) {\n      onSubmit({\n        surveyId,\n        feedbacks: getFeedbacks(feedbackState),\n      });\n    }\n  }, [onSubmit, validatePageFeedbacks, feedbackState, surveyId]);\n\n  const onBackPressHandler = React.useCallback(() => {\n    onPrevPage();\n  }, [onPrevPage]);\n\n  // why use a dummy button here? we use 'space-between' to layout the buttons\n  let LeftButtonComponent = Button;\n  if (!pageIndex || pageIndex <= 0) {\n    // @ts-ignore\n    LeftButtonComponent = DummyButton;\n  }\n\n  const themeColor = props.survey.surveyProperty.hexCode;\n  const btnWidth = dimensionWidthType === DimensionWidthType.phone ? 76 : 100;\n  return (\n    <View style={[styles.container, rtl && GlobalStyle.flexRowReverse]}>\n      <LeftButtonComponent\n        width={btnWidth}\n        title={i18n.t('survey:survey-back')}\n        color={themeColor}\n        onPress={onBackPressHandler}\n        // @ts-ignore\n        containerStyle={styles.leftBtnContainer}\n      />\n      <Button\n        width={btnWidth}\n        title={\n          lastPage\n            ? i18n.t('survey:survey-submit')\n            : i18n.t('survey:survey-next')\n        }\n        color={themeColor}\n        onPress={lastPage ? onSubmitPressHandler : onNextPressHandler}\n        // @ts-ignore\n        containerStyle={styles.rightBtnContainer}\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    ...GlobalStyle.row,\n    justifyContent: 'space-between',\n    marginVertical: 30,\n  },\n});\n\nexport default React.memo(SurveyFooter);\n"]}