{"version":3,"sources":["SurveyProgressBar.tsx"],"names":["numValidFeedbacks","answeredQuestionIds","feedbacksMap","filter","qid","feedback","answers","length","answer","numTotalQuestions","survey","questionNumOfPages","pages","map","page","questions","isAndroid","Platform","OS","SurveyProgressBar","rtl","props","feedbackState","themeColor","surveyProperty","hexCode","insets","keyboardShown","insetsBottom","bottom","containerStyle","React","useMemo","styles","container","backgroundColor","paddingBottom","StyleSheet","create","paddingHorizontal","width","memo"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;AANA;AASA,MAAMA,iBAAiB,GAAG,CAAC;AACzBC,EAAAA,mBADyB;AAEzBC,EAAAA;AAFyB,CAAD,KAMpB;AACJ,SAAOD,mBAAmB,CAACE,MAApB,CAA4BC,GAAD,IAAS;AACzC,UAAMC,QAAQ,GAAGH,YAAY,CAACE,GAAD,CAA7B,CADyC,CAGzC;;AACA,QAAI,CAACC,QAAD,IAAa,CAACA,QAAQ,CAACC,OAAvB,IAAkC,CAACD,QAAQ,CAACC,OAAT,CAAiBC,MAAxD,EAAgE;AAC9D,aAAO,KAAP;AACD,KANwC,CAQzC;;;AACA,UAAMC,MAAM,GAAGH,QAAQ,CAACC,OAAT,CAAiB,CAAjB,CAAf;;AACA,QAAI,OAAOE,MAAP,KAAkB,QAAlB,IAA8B,CAACA,MAAM,CAACD,MAA1C,EAAkD;AAChD,aAAO,KAAP;AACD;;AAED,WAAO,IAAP;AACD,GAfM,EAeJA,MAfH;AAgBD,CAvBD;;AAyBA,MAAME,iBAAiB,GAAIC,MAAD,IAAoB;AAC5C,QAAMC,kBAAkB,GAAGD,MAAM,CAACE,KAAP,CAAaC,GAAb,CAAkBC,IAAD,IAAUA,IAAI,CAACC,SAAL,CAAeR,MAA1C,CAA3B;AACA,SAAO,gBAAII,kBAAJ,CAAP;AACD,CAHD;;AAKA,MAAMK,SAAS,GAAGC,sBAASC,EAAT,KAAgB,SAAlC;;AAOA,MAAMC,iBAAiB,GAAG,CAAC;AAAEC,EAAAA,GAAF;AAAO,KAAGC;AAAV,CAAD,KAA8B;AACtD,QAAMC,aAAa,GAAG,iCAAtB;AACA,QAAMC,UAAU,GAAGF,KAAK,CAACX,MAAN,CAAac,cAAb,CAA4BC,OAA/C;AACA,QAAMC,MAAM,GAAG,oDAAf;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAoB,yBAA1B;AAEA,QAAMC,YAAY,GAChB;AACA;AACAZ,EAAAA,SAAS,IAAIU,MAAM,CAACG,MAAP,IAAiB,GAA9B,GAAoC,CAApC,GAAwCH,MAAM,CAACG,MAHjD;AAKA,QAAMC,cAAc,GAAGC,KAAK,CAACC,OAAN,CACrB,MAAM,CACJC,MAAM,CAACC,SADH,EAEJ;AACEC,IAAAA,eAAe,EAAE,uBAAUZ,UAAV,CADnB;AAEEa,IAAAA,aAAa,EAAER,YAAY,IAAI;AAFjC,GAFI,CADe,EAQrB,CAACA,YAAD,EAAeL,UAAf,CARqB,CAAvB,CAXsD,CAsBtD;;AACA,MAAIP,SAAS,IAAIW,aAAjB,EAAgC,OAAO,IAAP;AAEhC,sBACE,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAEG;AAAb,kBACE,oBAAC,oBAAD;AACE,IAAA,KAAK,EAAE9B,iBAAiB,CAACsB,aAAD,CAD1B;AAEE,IAAA,QAAQ,EAAEb,iBAAiB,CAACY,KAAK,CAACX,MAAP,CAF7B;AAGE,IAAA,UAAU,EAAEa,UAHd;AAIE,IAAA,GAAG,EAAEH;AAJP,IADF,CADF;AAUD,CAnCD;;AAqCA,MAAMa,MAAM,GAAGI,wBAAWC,MAAX,CAAkB;AAC/BJ,EAAAA,SAAS,EAAE;AACTK,IAAAA,iBAAiB,EAAE,EADV;AAETC,IAAAA,KAAK,EAAE;AAFE;AADoB,CAAlB,CAAf;;4BAOeT,KAAK,CAACU,IAAN,CAAWtB,iBAAX,C","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, Platform } from 'react-native';\nimport { sum } from 'ramda';\n// @ts-ignore\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport { useKeyboard } from '@react-native-community/hooks';\n\nimport ProgressBar from '../components/ProgressBar';\nimport { useFeedbackState } from '../contexts/feedback';\nimport { opacity10 } from '../styles';\nimport type { Survey, Feedback } from '../data';\n\nconst numValidFeedbacks = ({\n  answeredQuestionIds,\n  feedbacksMap,\n}: {\n  answeredQuestionIds: string[];\n  feedbacksMap: { [key: string]: Feedback };\n}) => {\n  return answeredQuestionIds.filter((qid) => {\n    const feedback = feedbacksMap[qid];\n\n    // if no answers or 0 length, filter out\n    if (!feedback || !feedback.answers || !feedback.answers.length) {\n      return false;\n    }\n\n    // a special case: answers: [\"\"], should also consider as invalid\n    const answer = feedback.answers[0];\n    if (typeof answer === 'string' && !answer.length) {\n      return false;\n    }\n\n    return true;\n  }).length;\n};\n\nconst numTotalQuestions = (survey: Survey) => {\n  const questionNumOfPages = survey.pages.map((page) => page.questions.length);\n  return sum(questionNumOfPages);\n};\n\nconst isAndroid = Platform.OS === 'android';\n\ntype Props = {\n  rtl: boolean;\n  survey: Survey;\n};\n\nconst SurveyProgressBar = ({ rtl, ...props }: Props) => {\n  const feedbackState = useFeedbackState();\n  const themeColor = props.survey.surveyProperty.hexCode;\n  const insets = useSafeAreaInsets();\n  const { keyboardShown } = useKeyboard();\n\n  const insetsBottom =\n    // if it is android, and the insets bottom is not normal,\n    // maybe it is because the keyboard is showed, don't use this insets\n    isAndroid && insets.bottom >= 100 ? 0 : insets.bottom;\n\n  const containerStyle = React.useMemo(\n    () => [\n      styles.container,\n      {\n        backgroundColor: opacity10(themeColor),\n        paddingBottom: insetsBottom || 15,\n      },\n    ],\n    [insetsBottom, themeColor]\n  );\n\n  // hide this bar when it is android and keyboard is shown\n  if (isAndroid && keyboardShown) return null;\n\n  return (\n    <View style={containerStyle}>\n      <ProgressBar\n        value={numValidFeedbacks(feedbackState)}\n        maxValue={numTotalQuestions(props.survey)}\n        themeColor={themeColor}\n        rtl={rtl}\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 30,\n    width: '100%',\n  },\n});\n\nexport default React.memo(SurveyProgressBar);\n"]}