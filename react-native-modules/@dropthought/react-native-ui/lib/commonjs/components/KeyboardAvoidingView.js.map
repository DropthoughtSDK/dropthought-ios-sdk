{"version":3,"sources":["KeyboardAvoidingView.tsx"],"names":["Platform","OS","UIManager","setLayoutAnimationEnabledExperimental","computeOffset","keyboardEvent","frameBottomY","show","offset","keyboardEndY","endCoordinates","screenY","select","android","default","Math","min","configureLayoutAnimation","duration","easing","LayoutAnimation","configureNext","max","update","type","Types","easeIn","useKeyboardAvoidingFocusedInputView","parentViewRef","extraAvoidingSpace","bottomHeight","setBottomHeight","React","useState","keyboardChangeHandler","useCallback","event","currentlyFocusedField","TextInput","State","currentlyFocusedInput","current","viewIsDescendantOf","isDescendant","measureInWindow","_x","y","_width","height","currentlyFocusedFieldBottomY","useEffect","keyboardEvents","name","subscriptions","map","eventInfo","Keyboard","addListener","cleanup","forEach","subscription","remove","KeyboardAvoidingView","children","style","props","viewRef","useRef","StyleSheet","compose","styles","contentContainerStyle","bottom","KeyboardAvoidingScrollViewForwardRef","ref","KeyboardAvoidingScrollView","forwardRef","create"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  TextInput,\n  StyleSheet,\n  Platform,\n  Keyboard,\n  UIManager,\n  LayoutAnimation,\n  findNodeHandle,\n  ScrollView,\n  KeyboardEvent,\n  KeyboardEventName,\n  ViewProps,\n  ScrollViewProps,\n  ViewStyle,\n} from 'react-native';\n\nif (Platform.OS === 'android') {\n  if (UIManager.setLayoutAnimationEnabledExperimental) {\n    UIManager.setLayoutAnimationEnabledExperimental(true);\n  }\n}\n\n// compute the offsets from keyboard End coordinate to frame's bottom\nconst computeOffset = (\n  keyboardEvent: KeyboardEvent,\n  frameBottomY: number | undefined | null,\n  show: boolean\n) => {\n  let offset = 0;\n  if (keyboardEvent && show && frameBottomY) {\n    // the offset from keyboard coordinate to view's bottom Y coordinate\n    const keyboardEndY =\n      keyboardEvent.endCoordinates.screenY -\n      Platform.select({\n        // it looks that in android, it didn't consider the the suggestion box of the keyboard\n        android: 40,\n        default: 0,\n      });\n\n    // only consider the negative\n    offset = Math.min(keyboardEndY - frameBottomY, 0);\n  }\n  return offset;\n};\n\nconst configureLayoutAnimation = (keyboardEvent: KeyboardEvent) => {\n  const { duration = 0, easing } = keyboardEvent;\n  if (easing) {\n    LayoutAnimation.configureNext({\n      // We have to pass the duration equal to minimal accepted duration defined here: RCTLayoutAnimation.m\n      duration: Math.max(duration, 10),\n      update: {\n        duration: Math.max(duration, 10),\n        type:\n          Platform.OS === 'android'\n            ? LayoutAnimation.Types.easeIn\n            : LayoutAnimation.Types[easing],\n      },\n    });\n  }\n};\n\nexport const useKeyboardAvoidingFocusedInputView = (\n  parentViewRef: { current?: View },\n  extraAvoidingSpace = 0\n): { bottomHeight: number } => {\n  const [bottomHeight, setBottomHeight] = React.useState<number>(0);\n\n  const keyboardChangeHandler = React.useCallback(\n    (event, show) => {\n      // @ts-ignore\n      const currentlyFocusedField = TextInput.State.currentlyFocusedInput\n        ? // @ts-ignore\n          findNodeHandle(TextInput.State.currentlyFocusedInput())\n        : TextInput.State.currentlyFocusedField();\n\n      // if there's no focused input or keyboard is not show or view is not existed\n      if (!currentlyFocusedField || !show || !parentViewRef.current) {\n        configureLayoutAnimation(event);\n        setBottomHeight(0);\n        return;\n      }\n\n      // here we want to check if the focused input is \"within\" this view\n      // if it is not this view, do nothing (it could be a un-focused screen)\n      // @ts-ignore\n      UIManager.viewIsDescendantOf(\n        currentlyFocusedField,\n        findNodeHandle(parentViewRef.current),\n        (isDescendant: boolean) => {\n          if (isDescendant) {\n            // measure the input's layout, compute the offset to the keyboard\n            UIManager.measureInWindow(\n              currentlyFocusedField,\n              (_x, y, _width, height) => {\n                const currentlyFocusedFieldBottomY =\n                  y + height + extraAvoidingSpace;\n                const offset = computeOffset(\n                  event,\n                  currentlyFocusedFieldBottomY,\n                  show\n                );\n                // if the offset is smaller than 0, it means it is below the keyboard\n                if (offset < 0) {\n                  configureLayoutAnimation(event);\n                  setBottomHeight(0 - offset);\n                }\n              }\n            );\n          }\n        }\n      );\n    },\n    [parentViewRef, extraAvoidingSpace]\n  );\n\n  // keyboard change effect\n  React.useEffect(() => {\n    // subscribe to these keyboard events\n    let keyboardEvents: { name: KeyboardEventName; show: boolean }[] =\n      Platform.select({\n        default: [\n          { name: 'keyboardWillShow', show: true },\n          { name: 'keyboardWillHide', show: false },\n        ],\n        android: [\n          { name: 'keyboardDidShow', show: true },\n          { name: 'keyboardDidHide', show: false },\n        ],\n      });\n\n    let subscriptions = keyboardEvents.map((eventInfo) => {\n      return Keyboard.addListener(eventInfo.name, (event) =>\n        keyboardChangeHandler(event, eventInfo.show)\n      );\n    });\n\n    return function cleanup() {\n      subscriptions.forEach((subscription) => {\n        subscription.remove();\n      });\n    };\n  }, [keyboardChangeHandler]);\n\n  return {\n    bottomHeight,\n  };\n};\n\ninterface KeyboardAvoidingViewProps extends ViewProps {\n  extraAvoidingSpace: number;\n}\n\nconst KeyboardAvoidingView: React.FC<KeyboardAvoidingViewProps> = ({\n  children,\n  style,\n  extraAvoidingSpace = 0,\n  ...props\n}) => {\n  const viewRef = React.useRef<View>(null);\n  const { bottomHeight } = useKeyboardAvoidingFocusedInputView(\n    // @ts-ignore\n    viewRef,\n    extraAvoidingSpace\n  );\n\n  if (Platform.OS === 'android') {\n    return (\n      <View style={style} {...props}>\n        {children}\n      </View>\n    );\n  }\n\n  return (\n    <View ref={viewRef} style={style} {...props}>\n      <View\n        style={StyleSheet.compose(styles.contentContainerStyle, {\n          // @ts-ignore\n          bottom: bottomHeight,\n        })}\n      >\n        {children}\n      </View>\n    </View>\n  );\n};\n\n/**\n * @param {KeyboardAvoidingProps & ScrollViewProps} param0\n * @param {*} ref\n */\n\ninterface KeyboardAvoidingScrollViewProps extends ScrollViewProps {\n  contentContainerStyle: ViewStyle;\n  style: any;\n  extraAvoidingSpace: number;\n}\n\nconst KeyboardAvoidingScrollViewForwardRef: React.FC<KeyboardAvoidingScrollViewProps> =\n  (\n    {\n      children,\n      style,\n      contentContainerStyle,\n      extraAvoidingSpace = 0,\n      ...props\n    },\n    ref\n  ) => {\n    const { bottomHeight } = useKeyboardAvoidingFocusedInputView(\n      ref,\n      extraAvoidingSpace\n    );\n\n    if (Platform.OS === 'android') {\n      return (\n        <ScrollView\n          style={style}\n          contentContainerStyle={contentContainerStyle}\n          {...props}\n          ref={ref}\n        >\n          {children}\n        </ScrollView>\n      );\n    }\n\n    return (\n      <ScrollView\n        ref={ref}\n        style={style}\n        contentContainerStyle={StyleSheet.compose(contentContainerStyle, {\n          bottom: bottomHeight,\n        })}\n        {...props}\n      >\n        {children}\n      </ScrollView>\n    );\n  };\n\n/** @type {React.FunctionComponent<KeyboardAvoidingProps & ScrollViewProps>} */\nexport const KeyboardAvoidingScrollView = React.forwardRef(\n  // @ts-ignore\n  KeyboardAvoidingScrollViewForwardRef\n);\n\nconst styles = StyleSheet.create({\n  contentContainerStyle: {\n    height: '100%',\n  },\n});\n\nexport default KeyboardAvoidingView;\n\n/**\n * @typedef {object} KeyboardAvoidingProps\n * @property {ViewStyle} contentContainerStyle\n * @property {ViewStyle} style\n * @property {number=} extraAvoidingSpace - optional, the default behavior of this keyboard avoiding is to avoid the whole input box, but if you wish to have extra space to avoid\n */\n"]}