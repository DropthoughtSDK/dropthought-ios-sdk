{"version":3,"sources":["ProgressBar.tsx"],"names":["ProgressBar","value","maxValue","themeColor","rtl","dimensionWidthType","percentage","Math","round","containerStyle","styles","container","GlobalStyle","row","flexRowReverse","trackStyle","track","backgroundColor","progressBarStyle","progressBar","width","flex1","title","textAlignRight","titleSize","i18n","t","StyleSheet","create","paddingVertical","color","Colors","progressBarText","fontWeight","borderRadius","height","position","DimensionWidthType","phone","marginLeft","marginRight","fontSize","tablet","React","memo"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AAIA;;AACA;;;;;;;;AAcA,MAAMA,WAAW,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA,UAAnB;AAA+BC,EAAAA;AAA/B,CAAD,KAAiD;AACnE,QAAMC,kBAAkB,GAAG,iDAA3B,CADmE,CAGnE;;AACA,QAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAYP,KAAK,GAAG,GAAT,GAAgBC,QAA3B,CAAnB;AAEA,QAAMO,cAAc,GAAG,CACrBC,MAAM,CAACC,SADc,EAErBC,oBAAYC,GAFS,EAGrBT,GAAG,IAAIQ,oBAAYE,cAHE,CAAvB;AAMA,QAAMC,UAAU,GAAG,CACjBL,MAAM,CAACM,KADU,EAEjB;AACEC,IAAAA,eAAe,EAAE,uBAAUd,UAAV;AADnB,GAFiB,CAAnB;AAOA,QAAMe,gBAAgB,GAAG,CACvBR,MAAM,CAACS,WADgB,EAEvBT,MAAM,CAACM,KAFgB,EAGvB;AACEI,IAAAA,KAAK,EAAG,GAAEd,UAAW,GADvB;AAEEW,IAAAA,eAAe,EAAEd;AAFnB,GAHuB,CAAzB;AASA,sBACE,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAEM;AAAb,kBAEE,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAEG,oBAAYS;AAAzB,kBACE,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAEN;AAAb,IADF,eAEE,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAEG;AAAb,IAFF,CAFF,eAME,oBAAC,iBAAD;AACE,IAAA,KAAK,EAAE,CACLR,MAAM,CAACY,KADF,EAELlB,GAAG,IAAIQ,oBAAYW,cAFd,EAGLC,SAAS,CAACnB,kBAAD,CAHJ;AADT,KAQGoB,qBAAKC,CAAL,CAAO,qBAAP,EAA8B;AAAEpB,IAAAA;AAAF,GAA9B,CARH,CANF,CADF;AAmBD,CA/CD;;AAiDA,MAAMI,MAAM,GAAGiB,wBAAWC,MAAX,CAAkB;AAC/BjB,EAAAA,SAAS,EAAE;AACTkB,IAAAA,eAAe,EAAE;AADR,GADoB;AAI/BP,EAAAA,KAAK,EAAE;AACLQ,IAAAA,KAAK,EAAG,GAAEC,eAAOC,eAAgB,IAD5B;AAELC,IAAAA,UAAU,EAAE;AAFP,GAJwB;AAQ/BjB,EAAAA,KAAK,EAAE;AACLI,IAAAA,KAAK,EAAE,MADF;AAELc,IAAAA,YAAY,EAAE,CAFT;AAGLC,IAAAA,MAAM,EAAE;AAHH,GARwB;AAa/BhB,EAAAA,WAAW,EAAE;AACXiB,IAAAA,QAAQ,EAAE;AADC;AAbkB,CAAlB,CAAf;;AAkBA,MAAMZ,SAAS,GAAGG,wBAAWC,MAAX,CAAkB;AAClC,GAACS,wCAAmBC,KAApB,GAA4B;AAC1BC,IAAAA,UAAU,EAAE,EADc;AAE1BC,IAAAA,WAAW,EAAE,EAFa;AAG1BC,IAAAA,QAAQ,EAAE;AAHgB,GADM;AAMlC,GAACJ,wCAAmBK,MAApB,GAA6B;AAC3BH,IAAAA,UAAU,EAAE,EADe;AAE3BC,IAAAA,WAAW,EAAE,EAFc;AAG3BC,IAAAA,QAAQ,EAAE;AAHiB;AANK,CAAlB,CAAlB;;4BAaeE,KAAK,CAACC,IAAN,CAAW5C,WAAX,C","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\n\nimport {\n  DimensionWidthType,\n  useDimensionWidthType,\n} from '../hooks/useWindowDimensions';\nimport { Colors, GlobalStyle, opacity30 } from '../styles';\nimport i18n from '../translation';\n\n/**\n * The ProgressBar will use `value` and `maxValue` to\n * compute the percentage\n */\n\ntype Props = {\n  value: number; // the current value\n  maxValue: number; // the max\n  themeColor: string; // the bar color\n  rtl: boolean;\n};\n\nconst ProgressBar = ({ value, maxValue, themeColor, rtl }: Props) => {\n  const dimensionWidthType = useDimensionWidthType();\n\n  // compute the percentage value: (value/maxValue)*100\n  const percentage = Math.round((value * 100) / maxValue);\n\n  const containerStyle = [\n    styles.container,\n    GlobalStyle.row,\n    rtl && GlobalStyle.flexRowReverse,\n  ];\n\n  const trackStyle = [\n    styles.track,\n    {\n      backgroundColor: opacity30(themeColor),\n    },\n  ];\n\n  const progressBarStyle = [\n    styles.progressBar,\n    styles.track,\n    {\n      width: `${percentage}%`,\n      backgroundColor: themeColor,\n    },\n  ];\n\n  return (\n    <View style={containerStyle}>\n      {/* the progress bar */}\n      <View style={GlobalStyle.flex1}>\n        <View style={trackStyle} />\n        <View style={progressBarStyle} />\n      </View>\n      <Text\n        style={[\n          styles.title,\n          rtl && GlobalStyle.textAlignRight,\n          titleSize[dimensionWidthType],\n        ]}\n      >\n        {/* {percentage}% of 100% completed */}\n        {i18n.t('survey:progress-bar', { percentage })}\n      </Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingVertical: 12,\n  },\n  title: {\n    color: `${Colors.progressBarText}99`,\n    fontWeight: '500',\n  },\n  track: {\n    width: '100%',\n    borderRadius: 3,\n    height: 6,\n  },\n  progressBar: {\n    position: 'absolute',\n  },\n});\n\nconst titleSize = StyleSheet.create({\n  [DimensionWidthType.phone]: {\n    marginLeft: 10,\n    marginRight: 10,\n    fontSize: 12,\n  },\n  [DimensionWidthType.tablet]: {\n    marginLeft: 15,\n    marginRight: 15,\n    fontSize: 14,\n  },\n});\n\nexport default React.memo(ProgressBar);\n"]}