{"version":3,"sources":["PlaceholderScreen.tsx"],"names":["PlaceholderImageTypes","imageTypeSources","COLOR_SCHEMES","light","NoInternet","require","ProgramScheduled","ProgramExpired","ProgramDeleted","ProgramDeactivated","ProgramUnavailable","dark","PlaceholderScreen","message","imageSource","imageType","children","title","i18n","t","undefined","colorScheme","fontColor","backgroundColor","styles","container","image","body","color","messageDark","messageLight","StyleSheet","create","GlobalStyle","flex1","Colors","white","justifyContent","alignSelf","resizeMode","paddingHorizontal","marginTop","fontSize","textAlign","fontWeight","lineHeight","placeholderText","opacity"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Image, StyleSheet, Text } from 'react-native';\nimport { Colors, GlobalStyle } from '../styles';\nimport i18n from '../translation';\nimport { useTheme, COLOR_SCHEMES } from '../contexts/theme';\n\nexport enum PlaceholderImageTypes {\n  NoInternet = 'NoInternet',\n  ProgramScheduled = 'ProgramScheduled',\n  ProgramExpired = 'ProgramExpired',\n  ProgramDeleted = 'ProgramDeleted',\n  ProgramDeactivated = 'ProgramDeactivated',\n  ProgramUnavailable = 'ProgramUnavailable',\n}\n\nexport type IPlaceholderImageTypesType =\n  | PlaceholderImageTypes.NoInternet\n  | PlaceholderImageTypes.ProgramScheduled\n  | PlaceholderImageTypes.ProgramExpired\n  | PlaceholderImageTypes.ProgramDeleted\n  | PlaceholderImageTypes.ProgramDeactivated\n  | PlaceholderImageTypes.ProgramUnavailable;\n\nconst imageTypeSources = {\n  [COLOR_SCHEMES.light]: {\n    [PlaceholderImageTypes.NoInternet]: require('../assets/placeholder-no-internet.png'),\n    [PlaceholderImageTypes.ProgramScheduled]: require('../assets/placeholder-program-scheduled.png'),\n    [PlaceholderImageTypes.ProgramExpired]: require('../assets/placeholder-program-expired.png'),\n    [PlaceholderImageTypes.ProgramDeleted]: require('../assets/placeholder-program-deleted.png'),\n    [PlaceholderImageTypes.ProgramDeactivated]: require('../assets/placeholder-program-deactivated.png'),\n    [PlaceholderImageTypes.ProgramUnavailable]: require('../assets/placeholder-program-unavailable.png'),\n  },\n  [COLOR_SCHEMES.dark]: {\n    [PlaceholderImageTypes.NoInternet]: require('../assets/placeholder-no-internet_dark.png'),\n    [PlaceholderImageTypes.ProgramScheduled]: require('../assets/placeholder-program-scheduled_dark.png'),\n    [PlaceholderImageTypes.ProgramExpired]: require('../assets/placeholder-program-expired_dark.png'),\n    [PlaceholderImageTypes.ProgramDeleted]: require('../assets/placeholder-program-deleted_dark.png'),\n    [PlaceholderImageTypes.ProgramDeactivated]: require('../assets/placeholder-program-deactivated_dark.png'),\n    [PlaceholderImageTypes.ProgramUnavailable]: require('../assets/placeholder-program-unavailable_dark.png'),\n  },\n};\n\ntype Props = {\n  message?: string;\n  imageSource?: string;\n  imageType: IPlaceholderImageTypesType;\n  children?: React.ReactNode;\n};\n\nconst PlaceholderScreen = ({\n  message,\n  imageSource,\n  imageType,\n  children,\n}: Props) => {\n  const title = i18n.t(`placeholder-title:${imageType}`, undefined);\n  const { colorScheme, fontColor, backgroundColor } = useTheme();\n\n  return (\n    <View style={[styles.container, { backgroundColor }]}>\n      <Image\n        // @ts-ignore\n        source={imageTypeSources[colorScheme][imageType] || imageSource}\n        style={styles.image}\n      />\n\n      <View style={styles.body}>\n        {title && (\n          <Text style={[styles.title, { color: fontColor }]}>{title}</Text>\n        )}\n\n        {message && (\n          <Text\n            style={[\n              styles.message,\n              {\n                color: fontColor,\n              },\n              colorScheme === COLOR_SCHEMES.dark\n                ? styles.messageDark\n                : styles.messageLight,\n            ]}\n          >\n            {message}\n          </Text>\n        )}\n        {children}\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    ...GlobalStyle.flex1,\n    backgroundColor: Colors.white,\n    justifyContent: 'center',\n  },\n  image: {\n    alignSelf: 'center',\n    resizeMode: 'contain',\n  },\n  body: {\n    paddingHorizontal: 60,\n  },\n  title: {\n    marginTop: 30,\n    fontSize: 14,\n    textAlign: 'center',\n    fontWeight: 'bold',\n    lineHeight: 22,\n    color: Colors.placeholderText,\n  },\n  message: {\n    marginTop: 12,\n    textAlign: 'center',\n    lineHeight: 22,\n    fontSize: 14,\n    fontWeight: 'normal',\n    color: Colors.placeholderText,\n  },\n  messageLight: {\n    opacity: 1,\n  },\n  messageDark: {\n    opacity: 0.75,\n  },\n});\n\nexport default PlaceholderScreen;\n"]}