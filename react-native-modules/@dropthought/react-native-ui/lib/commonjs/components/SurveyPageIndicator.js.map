{"version":3,"sources":["SurveyPageIndicator.tsx"],"names":["SurveyPageIndicator","props","survey","pageIndex","rtl","colorScheme","isDarkMode","COLOR_SCHEMES","dark","themeColor","surveyProperty","hexCode","dimensionWidthType","dimensionStyles","DimensionWidthType","phone","phoneStyles","tabletStyles","currentPage","pages","styles","container","backgroundColor","darkModeContainer","title","darkModeTitle","pageTitle","StyleSheet","create","justifyContent","height","width","fontWeight","color","Colors","white","alignItems","paddingHorizontal","fontSize","letterSpacing","progressBarText","React","memo"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AAIA;;AAEA;;;;;;AAQA,MAAMA,mBAAmB,GAAIC,KAAD,IAAkB;AAC5C,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,SAAS,GAAG,CAAtB;AAAyBC,IAAAA;AAAzB,MAAiCH,KAAvC;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAkB,sBAAxB;AACA,QAAMC,UAAU,GAAGD,WAAW,KAAKE,qBAAcC,IAAjD;AACA,QAAMC,UAAU,GAAGP,MAAM,CAACQ,cAAP,CAAsBC,OAAzC;AAEA,QAAMC,kBAAkB,GAAG,iDAA3B;AACA,QAAMC,eAAe,GACnBD,kBAAkB,KAAKE,wCAAmBC,KAA1C,GACIC,WADJ,GAEIC,YAHN;AAKA,QAAMC,WAAW,GAAGhB,MAAM,CAACiB,KAAP,CAAahB,SAAb,CAApB;AAEA,sBACE,oBAAC,iBAAD;AACE,IAAA,KAAK,EAAE,CACLiB,MAAM,CAACC,SADF,EAELR,eAAe,CAACQ,SAFX,EAGL;AACEC,MAAAA,eAAe,EAAE,uBAAUb,UAAV;AADnB,KAHK,EAMLH,UAAU,IAAIc,MAAM,CAACG,iBANhB,EAOLnB,GAAG,GAAGgB,MAAM,CAAChB,GAAV,GAAgB,EAPd;AADT,kBAWE,oBAAC,iBAAD;AACE,IAAA,KAAK,EAAE,CACLgB,MAAM,CAACI,KADF,EAELX,eAAe,CAACW,KAFX,EAGLlB,UAAU,IAAIc,MAAM,CAACK,aAHhB;AADT,KAOGP,WAAW,CAACQ,SAPf,CAXF,CADF;AAuBD,CArCD;;AAuCA,MAAMN,MAAM,GAAGO,wBAAWC,MAAX,CAAkB;AAC/BP,EAAAA,SAAS,EAAE;AACTQ,IAAAA,cAAc,EAAE,QADP;AAETC,IAAAA,MAAM,EAAE,EAFC;AAGTC,IAAAA,KAAK,EAAE;AAHE,GADoB;AAM/BR,EAAAA,iBAAiB,EAAE;AACjBD,IAAAA,eAAe,EAAE;AADA,GANY;AAS/BE,EAAAA,KAAK,EAAE;AACLQ,IAAAA,UAAU,EAAE;AADP,GATwB;AAY/BP,EAAAA,aAAa,EAAE;AACbQ,IAAAA,KAAK,EAAE,uBAAUC,eAAOC,KAAjB;AADM,GAZgB;AAe/B/B,EAAAA,GAAG,EAAE;AACHgC,IAAAA,UAAU,EAAE;AADT;AAf0B,CAAlB,CAAf;;AAoBA,MAAMpB,WAAW,GAAGW,wBAAWC,MAAX,CAAkB;AACpCP,EAAAA,SAAS,EAAE;AACTgB,IAAAA,iBAAiB,EAAE;AADV,GADyB;AAIpCb,EAAAA,KAAK,EAAE;AACLc,IAAAA,QAAQ,EAAE,EADL;AAELC,IAAAA,aAAa,EAAE,IAFV;AAGLN,IAAAA,KAAK,EAAEC,eAAOM;AAHT;AAJ6B,CAAlB,CAApB;;AAWA,MAAMvB,YAAY,GAAGU,wBAAWC,MAAX,CAAkB;AACrCP,EAAAA,SAAS,EAAE;AACTgB,IAAAA,iBAAiB,EAAE;AADV,GAD0B;AAIrCb,EAAAA,KAAK,EAAE;AACLc,IAAAA,QAAQ,EAAE,EADL;AAELC,IAAAA,aAAa,EAAE;AAFV;AAJ8B,CAAlB,CAArB;;4BAUeE,KAAK,CAACC,IAAN,CAAW1C,mBAAX,C","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\n\nimport {\n  DimensionWidthType,\n  useDimensionWidthType,\n} from '../hooks/useWindowDimensions';\nimport { opacity10, opacity60, Colors } from '../styles';\nimport type { Survey } from '../data';\nimport { useTheme, COLOR_SCHEMES } from '../contexts/theme';\n\ntype Props = {\n  pageIndex: number;\n  survey: Survey;\n  rtl: boolean;\n};\n\nconst SurveyPageIndicator = (props: Props) => {\n  const { survey, pageIndex = 0, rtl } = props;\n  const { colorScheme } = useTheme();\n  const isDarkMode = colorScheme === COLOR_SCHEMES.dark;\n  const themeColor = survey.surveyProperty.hexCode;\n\n  const dimensionWidthType = useDimensionWidthType();\n  const dimensionStyles =\n    dimensionWidthType === DimensionWidthType.phone\n      ? phoneStyles\n      : tabletStyles;\n\n  const currentPage = survey.pages[pageIndex];\n\n  return (\n    <View\n      style={[\n        styles.container,\n        dimensionStyles.container,\n        {\n          backgroundColor: opacity10(themeColor),\n        },\n        isDarkMode && styles.darkModeContainer,\n        rtl ? styles.rtl : {},\n      ]}\n    >\n      <Text\n        style={[\n          styles.title,\n          dimensionStyles.title,\n          isDarkMode && styles.darkModeTitle,\n        ]}\n      >\n        {currentPage.pageTitle}\n      </Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    height: 40,\n    width: '100%',\n  },\n  darkModeContainer: {\n    backgroundColor: '#39393a',\n  },\n  title: {\n    fontWeight: '600',\n  },\n  darkModeTitle: {\n    color: opacity60(Colors.white),\n  },\n  rtl: {\n    alignItems: 'flex-end',\n  },\n});\n\nconst phoneStyles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 30,\n  },\n  title: {\n    fontSize: 14,\n    letterSpacing: 0.42,\n    color: Colors.progressBarText,\n  },\n});\n\nconst tabletStyles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 35,\n  },\n  title: {\n    fontSize: 16,\n    letterSpacing: 0.48,\n  },\n});\n\nexport default React.memo(SurveyPageIndicator);\n"]}