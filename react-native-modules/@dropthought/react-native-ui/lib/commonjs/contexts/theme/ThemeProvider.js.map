{"version":3,"sources":["ThemeProvider.tsx"],"names":["getColorScheme","theme","systemColorScheme","colorScheme","THEME_OPTIONS","SYSTEM","COLOR_SCHEMES","LIGHT","DARK","includes","light","getFontColor","customFontColor","dark","Colors","fontColorDark","fontColorLight","getBackgroundColor","customBackgroundColor","backgroundColorDark","backgroundColorLight","useTheme","fontColor","backgroundColor","React","useMemo","ThemeProvider","children","themeValue"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;AASA,SAASA,cAAT,CACEC,KADF,EAEEC,iBAFF,EAGqB;AAAA;;AACnB,MAAIC,WAAJ;;AACA,MAAIF,KAAK,KAAKG,qBAAcC,MAA5B,EAAoC;AAClC,QAAIH,iBAAJ,EAAuB;AACrBC,MAAAA,WAAW,GAAGG,qBAAcJ,iBAAd,CAAd;AACD;AACF,GAJD,MAIO,IAAI,CAACE,qBAAcG,KAAf,EAAsBH,qBAAcI,IAApC,EAA0CC,QAA1C,CAAmDR,KAAnD,CAAJ,EAA+D;AACpEE,IAAAA,WAAW,GAAGG,qBAAcL,KAAd,CAAd;AACD;;AACD,yBAAOE,WAAP,uDAAsBG,qBAAcI,KAApC;AACD;;AAED,SAASC,YAAT,CACEC,eADF,EAEET,WAFF,EAGE;AACA,MAAIS,eAAJ,EAAqB;AACnB,WAAOA,eAAP;AACD;;AACD,MAAIT,WAAW,KAAKG,qBAAcO,IAAlC,EAAwC;AACtC,WAAOC,eAAOC,aAAd;AACD;;AACD,SAAOD,eAAOE,cAAd;AACD;;AAED,SAASC,kBAAT,CACEC,qBADF,EAEEf,WAFF,EAGE;AACA,MAAIe,qBAAJ,EAA2B;AACzB,WAAOA,qBAAP;AACD;;AACD,MAAIf,WAAW,KAAKG,qBAAcO,IAAlC,EAAwC;AACtC,WAAOC,eAAOK,mBAAd;AACD;;AACD,SAAOL,eAAOM,oBAAd;AACD;;AAED,SAASC,QAAT,CAAkB;AAChBpB,EAAAA,KADgB;AAEhBqB,EAAAA,SAAS,EAAEV,eAFK;AAGhBW,EAAAA,eAAe,EAAEL;AAHD,CAAlB,EAQG;AACD,QAAMhB,iBAAiB,GAAG,kCAA1B;AACA,QAAMC,WAAW,GAAGH,cAAc,CAACC,KAAD,EAAQC,iBAAR,CAAlC;AACA,QAAMoB,SAAS,GAAGX,YAAY,CAACC,eAAD,EAAkBT,WAAlB,CAA9B;AACA,QAAMoB,eAAe,GAAGN,kBAAkB,CACxCC,qBADwC,EAExCf,WAFwC,CAA1C;AAKA,SAAOqB,KAAK,CAACC,OAAN,CAAc,MAAM;AACzB,WAAO;AACLtB,MAAAA,WADK;AAELmB,MAAAA,SAFK;AAGLC,MAAAA;AAHK,KAAP;AAKD,GANM,EAMJ,CAACpB,WAAD,EAAcmB,SAAd,EAAyBC,eAAzB,CANI,CAAP;AAOD;;AASM,SAASG,aAAT,CAAuB;AAC5BC,EAAAA,QAD4B;AAE5B1B,EAAAA,KAF4B;AAG5BqB,EAAAA,SAH4B;AAI5BC,EAAAA;AAJ4B,CAAvB,EAKG;AACR,QAAMK,UAAU,GAAGP,QAAQ,CAAC;AAAEpB,IAAAA,KAAF;AAASqB,IAAAA,SAAT;AAAoBC,IAAAA;AAApB,GAAD,CAA3B;AAEA,sBACE,oBAAC,0BAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEK;AAA9B,KAA2CD,QAA3C,CADF;AAGD","sourcesContent":["import * as React from 'react';\nimport { useColorScheme, ColorSchemeName } from 'react-native';\nimport { Colors } from '../../styles';\nimport { ThemeContext } from './ThemeContext';\nimport {\n  THEME_OPTIONS,\n  COLOR_SCHEMES,\n  IThemeOptionsType,\n  IColorSchemesType,\n  FontColor,\n  BackgroundColor,\n} from './theme.const';\n\nfunction getColorScheme(\n  theme: IThemeOptionsType,\n  systemColorScheme: ColorSchemeName\n): IColorSchemesType {\n  let colorScheme;\n  if (theme === THEME_OPTIONS.SYSTEM) {\n    if (systemColorScheme) {\n      colorScheme = COLOR_SCHEMES[systemColorScheme];\n    }\n  } else if ([THEME_OPTIONS.LIGHT, THEME_OPTIONS.DARK].includes(theme)) {\n    colorScheme = COLOR_SCHEMES[theme];\n  }\n  return colorScheme ?? COLOR_SCHEMES.light;\n}\n\nfunction getFontColor(\n  customFontColor: FontColor,\n  colorScheme: IColorSchemesType\n) {\n  if (customFontColor) {\n    return customFontColor;\n  }\n  if (colorScheme === COLOR_SCHEMES.dark) {\n    return Colors.fontColorDark;\n  }\n  return Colors.fontColorLight;\n}\n\nfunction getBackgroundColor(\n  customBackgroundColor: BackgroundColor,\n  colorScheme: IColorSchemesType\n) {\n  if (customBackgroundColor) {\n    return customBackgroundColor;\n  }\n  if (colorScheme === COLOR_SCHEMES.dark) {\n    return Colors.backgroundColorDark;\n  }\n  return Colors.backgroundColorLight;\n}\n\nfunction useTheme({\n  theme,\n  fontColor: customFontColor,\n  backgroundColor: customBackgroundColor,\n}: {\n  theme: IThemeOptionsType;\n  fontColor: FontColor;\n  backgroundColor: BackgroundColor;\n}) {\n  const systemColorScheme = useColorScheme();\n  const colorScheme = getColorScheme(theme, systemColorScheme);\n  const fontColor = getFontColor(customFontColor, colorScheme);\n  const backgroundColor = getBackgroundColor(\n    customBackgroundColor,\n    colorScheme\n  );\n\n  return React.useMemo(() => {\n    return {\n      colorScheme,\n      fontColor,\n      backgroundColor,\n    };\n  }, [colorScheme, fontColor, backgroundColor]);\n}\n\ntype Props = {\n  children: React.ReactNode;\n  theme: IThemeOptionsType;\n  fontColor: FontColor;\n  backgroundColor: BackgroundColor;\n};\n\nexport function ThemeProvider({\n  children,\n  theme,\n  fontColor,\n  backgroundColor,\n}: Props) {\n  const themeValue = useTheme({ theme, fontColor, backgroundColor });\n\n  return (\n    <ThemeContext.Provider value={themeValue}>{children}</ThemeContext.Provider>\n  );\n}\n"]}