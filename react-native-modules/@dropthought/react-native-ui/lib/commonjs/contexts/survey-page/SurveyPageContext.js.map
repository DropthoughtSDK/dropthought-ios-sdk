{"version":3,"sources":["SurveyPageContext.tsx"],"names":["initialValue","mandatoryQuestionTitleRefs","addMandatoryQuestionTitleRef","undefined","SurveyPageContext","React","createContext","SurveyPageProvider","children","setRefs","useState","useCallback","questionId","ref","state","useMemo","useSurveyPageContext","useContext","useAddMandatoryRef"],"mappings":";;;;;;;;AASA;;AACA;;;;;;AAVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA,MAAMA,YAAoC,GAAG;AAC3CC,EAAAA,0BAA0B,EAAE,EADe;AAE3CC,EAAAA,4BAA4B,EAAE,MAAMC;AAFO,CAA7C;AAKA,MAAMC,iBAAwD,gBAC5DC,KAAK,CAACC,aAAN,CAAoBN,YAApB,CADF;;AAOO,SAASO,kBAAT,CAA4B;AAAEC,EAAAA;AAAF,CAA5B,EAAiD;AACtD,QAAM,CAACP,0BAAD,EAA6BQ,OAA7B,IAAwCJ,KAAK,CAACK,QAAN,CAAe,EAAf,CAA9C;AAEA,QAAMR,4BAA4B,GAAGG,KAAK,CAACM,WAAN,CAAkB,CAACC,UAAD,EAAaC,GAAb,KAAqB;AAC1E;AACAJ,IAAAA,OAAO,CAAC,kBAAMG,UAAN,EAAkBC,GAAlB,CAAD,CAAP;AACD,GAHoC,EAGlC,EAHkC,CAArC;AAKA;;AACA,QAAMC,KAAK,GAAGT,KAAK,CAACU,OAAN,CACZ,OAAO;AACLd,IAAAA,0BADK;AAELC,IAAAA;AAFK,GAAP,CADY,EAKZ,CAACD,0BAAD,EAA6BC,4BAA7B,CALY,CAAd;AAQA,sBACE,oBAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAEY;AAAnC,KACGN,QADH,CADF;AAKD;;AAEM,MAAMQ,oBAAoB,GAAG,MAAM;AACxC,SAAOX,KAAK,CAACY,UAAN,CAAiBb,iBAAjB,CAAP;AACD,CAFM;;;;AAIA,MAAMc,kBAAkB,GAAG,MAAM;AACtC,QAAM;AAAEhB,IAAAA;AAAF,MAAmCc,oBAAoB,EAA7D;AACA,SAAOd,4BAAP;AACD,CAHM","sourcesContent":["/**\n * @description\n * this context keep the mandatory question title ref of a single survey page\n * they are saved in the mandatoryQuestionTitleRefs, as map:\n * {\n *     'question-id-1': ref1,\n *     'question-id-3': ref3,\n * }\n */\nimport * as React from 'react';\nimport { assoc } from 'ramda';\n\ntype SurveyPageContextValue = {\n  mandatoryQuestionTitleRefs: { [questionId: string]: any };\n  addMandatoryQuestionTitleRef: (questionId: string, ref: any) => void;\n};\n\nconst initialValue: SurveyPageContextValue = {\n  mandatoryQuestionTitleRefs: {},\n  addMandatoryQuestionTitleRef: () => undefined,\n};\n\nconst SurveyPageContext: React.Context<SurveyPageContextValue> =\n  React.createContext(initialValue);\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport function SurveyPageProvider({ children }: Props) {\n  const [mandatoryQuestionTitleRefs, setRefs] = React.useState({});\n\n  const addMandatoryQuestionTitleRef = React.useCallback((questionId, ref) => {\n    // update the refs map by setting the questionId to ref\n    setRefs(assoc(questionId, ref));\n  }, []);\n\n  /** @type {SurveyPageContextValue} */\n  const state = React.useMemo(\n    () => ({\n      mandatoryQuestionTitleRefs,\n      addMandatoryQuestionTitleRef,\n    }),\n    [mandatoryQuestionTitleRefs, addMandatoryQuestionTitleRef]\n  );\n\n  return (\n    <SurveyPageContext.Provider value={state}>\n      {children}\n    </SurveyPageContext.Provider>\n  );\n}\n\nexport const useSurveyPageContext = () => {\n  return React.useContext(SurveyPageContext);\n};\n\nexport const useAddMandatoryRef = () => {\n  const { addMandatoryQuestionTitleRef } = useSurveyPageContext();\n  return addMandatoryQuestionTitleRef;\n};\n"]}