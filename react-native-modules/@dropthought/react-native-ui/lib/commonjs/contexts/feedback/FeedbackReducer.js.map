{"version":3,"sources":["FeedbackReducer.ts"],"names":["FeedbackReducerActionType","initialState","answeredQuestionIds","feedbacksMap","feedbackReducer","state","action","type","Update","updateFeedbackReducer","Clear","reducer","feedback","payload","existed","questionId","identity"],"mappings":";;;;;;;AAAA;;IAQYA,yB;;;WAAAA,yB;AAAAA,EAAAA,yB;AAAAA,EAAAA,yB;GAAAA,yB,yCAAAA,yB;;AAsBL,MAAMC,YAAkC,GAAG;AAChDC,EAAAA,mBAAmB,EAAE,EAD2B;AAEhDC,EAAAA,YAAY,EAAE;AAFkC,CAA3C;;;AAKA,MAAMC,eAAe,GAAG,CAC7BC,KAD6B,EAE7BC,MAF6B,KAGJ;AACzB,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,yBAAyB,CAACQ,MAA/B;AACE,aAAOC,qBAAqB,CAACJ,KAAD,EAAQC,MAAR,CAA5B;;AACF,SAAKN,yBAAyB,CAACU,KAA/B;AACE,aAAOT,YAAP;AAJJ;AAMD,CAVM;;;AAWA,MAAMU,OAAO,GAAGP,eAAhB;;;AAEP,MAAMK,qBAAqB,GAAG,CAC5BJ,KAD4B,EAE5BC,MAF4B,KAGH;AACzB,QAAMM,QAAQ,GAAGN,MAAM,CAACO,OAAP,CAAeD,QAAhC;AACA,QAAME,OAAO,GAAG,CAAC,CAACT,KAAK,CAACF,YAAN,CAAmBS,QAAQ,CAACG,UAA5B,CAAlB,CAFyB,CAGzB;;AACA,SAAO,mBAAO;AACZ;AACAb,IAAAA,mBAAmB,EAAEY,OAAO,GAAGE,eAAH,GAAc,mBAAOJ,QAAQ,CAACG,UAAhB,CAF9B;AAIZ;AACAZ,IAAAA,YAAY,EAAE,kBAAMS,QAAQ,CAACG,UAAf,EAA2BH,QAA3B;AALF,GAAP,EAMJP,KANI,CAAP;AAOD,CAdD","sourcesContent":["import { append, identity, evolve, assoc } from 'ramda';\nimport type { Feedback } from 'src/data';\n\nexport type FeedbackReducerState = {\n  answeredQuestionIds: string[];\n  feedbacksMap: { [questionId: string]: Feedback };\n};\n\nexport enum FeedbackReducerActionType {\n  Clear = 'clear-feedbacks',\n  Update = 'update-feedback',\n}\n\nexport type IFeedbackReducerActionType =\n  | FeedbackReducerActionType.Clear\n  | FeedbackReducerActionType.Update;\n\nexport type ClearFeedbacksAction = {\n  type: FeedbackReducerActionType.Clear;\n};\n\nexport type UpdateFeedbackAction = {\n  type: FeedbackReducerActionType.Update;\n  payload: { feedback: Feedback };\n};\n\nexport type FeedbackReducerAction = ClearFeedbacksAction | UpdateFeedbackAction;\n\nexport type FeedbackReducerDispatch = (action: FeedbackReducerAction) => void;\n\nexport const initialState: FeedbackReducerState = {\n  answeredQuestionIds: [],\n  feedbacksMap: {},\n};\n\nexport const feedbackReducer = (\n  state: FeedbackReducerState,\n  action: FeedbackReducerAction\n): FeedbackReducerState => {\n  switch (action.type) {\n    case FeedbackReducerActionType.Update:\n      return updateFeedbackReducer(state, action);\n    case FeedbackReducerActionType.Clear:\n      return initialState;\n  }\n};\nexport const reducer = feedbackReducer;\n\nconst updateFeedbackReducer = (\n  state: FeedbackReducerState,\n  action: UpdateFeedbackAction\n): FeedbackReducerState => {\n  const feedback = action.payload.feedback;\n  const existed = !!state.feedbacksMap[feedback.questionId];\n  // @ts-ignore\n  return evolve({\n    // if the feedback is already existed, return the original array(identity), otherwise, append the question id to the list\n    answeredQuestionIds: existed ? identity : append(feedback.questionId),\n\n    // always set the questionId to the feedback object\n    feedbacksMap: assoc(feedback.questionId, feedback),\n  })(state);\n};\n"]}