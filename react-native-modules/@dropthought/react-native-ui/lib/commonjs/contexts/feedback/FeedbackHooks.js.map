{"version":3,"sources":["FeedbackHooks.ts"],"names":["useFeedbackState","context","FeedbackStateContext","useFeedbackByQid","questionId","feedbackState","feedbacksMap","useFeedbackDispatch","dispatch","FeedbackDispatchContext"],"mappings":";;;;;;;AAAA;;AACA;;AAKA;AACA;AACA;AACO,MAAMA,gBAAgB,GAAG,MAAM;AACpC,QAAMC,OAAO,GAAG,uBAAWC,qCAAX,CAAhB;AAEA,SAAOD,OAAP;AACD,CAJM;AAMP;AACA;AACA;AACA;AACA;;;;;AACO,MAAME,gBAAgB,GAAIC,UAAD,IAAwB;AACtD,QAAMC,aAAa,GAAGL,gBAAgB,EAAtC;AAEA,SAAOK,aAAa,CAACC,YAAd,CAA2BF,UAA3B,CAAP;AACD,CAJM;AAMP;AACA;AACA;;;;;AACO,MAAMG,mBAAmB,GAAG,MAAM;AACvC,QAAMC,QAAQ,GAAG,uBAAWC,wCAAX,CAAjB;AACA,SAAOD,QAAP;AACD,CAHM;AAKP;;AACA;;AACA","sourcesContent":["import { useContext } from 'react';\nimport {\n  FeedbackDispatchContext,\n  FeedbackStateContext,\n} from './FeedbackContext';\n\n/**\n * @returns {FeedbackReducerState}\n */\nexport const useFeedbackState = () => {\n  const context = useContext(FeedbackStateContext);\n\n  return context;\n};\n\n/**\n * given the question id, return the feedback\n * @param {string} questionId\n * @returns {Feedback|undefined}\n */\nexport const useFeedbackByQid = (questionId: string) => {\n  const feedbackState = useFeedbackState();\n\n  return feedbackState.feedbacksMap[questionId];\n};\n\n/**\n * @returns {FeedbackDispatchContext}\n */\nexport const useFeedbackDispatch = () => {\n  const dispatch = useContext(FeedbackDispatchContext);\n  return dispatch;\n};\n\n/** @typedef {import('./FeedbackReducer').FeedbackReducerState} FeedbackReducerState */\n/** @typedef {import('./FeedbackReducer').FeedbackReducerDispatch} FeedbackReducerDispatch */\n/** @typedef {import('./FeedbackReducer').Feedback} Feedback */\n"]}