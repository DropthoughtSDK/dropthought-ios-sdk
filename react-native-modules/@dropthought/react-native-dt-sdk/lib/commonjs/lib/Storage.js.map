{"version":3,"sources":["Storage.ts"],"names":["keyPrefix","cacheKeyPrefix","storage","getItem","setItem","removeItem","getAllKeys","multiRemove","storageKey","key","cacheKey","clear","keys","keysWithPrefix","filter","startsWith","clearCache","load","initValue","undefined","result","value","JSON","parse","e","save","data","stringify","console","log","loadData","saveData","removeData","loadCache","saveCache","initStorage"],"mappings":"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","sourcesContent":["const keyPrefix = '@dropthought/dt-sdk/';\nconst cacheKeyPrefix = `${keyPrefix}cache/`;\n\nexport interface Storage {\n  getItem(\n    key: string,\n    callback?: (error?: Error, result?: string) => void\n  ): Promise<string | null>;\n\n  setItem(\n    key: string,\n    value: string,\n    callback?: (error?: Error) => void\n  ): Promise<void>;\n\n  removeItem(key: string, callback?: (error?: Error) => void): Promise<void>;\n\n  getAllKeys(\n    callback?: (error?: Error, keys?: string[]) => void\n  ): Promise<string[]>;\n\n  multiRemove(\n    keys: string[],\n    callback?: (errors?: Error[]) => void\n  ): Promise<void>;\n}\n\nlet storage: Storage = {\n  async getItem() {\n    return null;\n  },\n  async setItem() {},\n  async removeItem() {},\n  async getAllKeys() {\n    return [];\n  },\n  async multiRemove() {},\n};\n\n/**\n * given 'program-report/pid/@favorite-filters' -> '@com.abc.com/program-report/pid/@favorite-filters'\n * @param {string} key\n * @returns {string}\n */\nexport const storageKey = (key: string) => {\n  return `${keyPrefix}${key}`;\n};\n\n/**\n * given 'program-report/pid/@favorite-filters' -> '@com.abc.com/cache/program-report/pid/@favorite-filters'\n * purpose: we can clear the cache by checking the prefix\n * @param {string} key\n * @returns {string}\n */\nexport const cacheKey = (key: string) => {\n  return `${cacheKeyPrefix}${key}`;\n};\n\n/**\n * @description only clear data that starts with '@bundle-id'\n */\nexport async function clear() {\n  const keys = await storage.getAllKeys();\n  const keysWithPrefix = keys.filter((key) => key.startsWith(keyPrefix));\n\n  await storage.multiRemove(keysWithPrefix);\n}\n\n/**\n * @description only clear data that starts with '@bundle-id/cache/'\n */\nexport async function clearCache() {\n  const keys = await storage.getAllKeys();\n  const keysWithPrefix = keys.filter((key) => key.startsWith(cacheKeyPrefix));\n\n  await storage.multiRemove(keysWithPrefix);\n}\n\n/**\n * @template T\n * @param {string} key\n * @param {T=} initValue\n * @returns {Promise<T>}\n */\nconst load = async (key: string, initValue = undefined) => {\n  let result = initValue;\n  try {\n    const value = await storage.getItem(key);\n    if (value !== null) {\n      result = JSON.parse(value);\n    }\n  } catch (e) {}\n  return result;\n};\n\n/**\n * @template T\n * @param {string} key\n * @param {T} data\n */\nconst save = async (key: string, data: any) => {\n  try {\n    await storage.setItem(key, JSON.stringify(data));\n  } catch (e) {\n    console.log('failed at save to storage', key, data);\n  }\n  return data;\n};\n\n/**\n * @template T\n * @param {string} key\n * @param {T=} initValue\n * @returns {Promise<T>}\n */\nexport const loadData = async (key: string, initValue = undefined) => {\n  return load(storageKey(key), initValue);\n};\n\n/**\n * @template T\n * @param {string} key\n * @param {T} data\n */\nexport const saveData = async (key: string, data: any) => {\n  return save(storageKey(key), data);\n};\n\n/**\n * @param {string} key\n */\nexport const removeData = async (key: string) => {\n  return storage.removeItem(storageKey(key));\n};\n\n/**\n * @template T\n * @param {string} key\n * @param {T=} initValue\n * @returns {Promise<T>}\n */\nexport const loadCache = async (key: string, initValue = undefined) => {\n  return load(cacheKey(key), initValue);\n};\n\n/**\n * @template T\n * @param {string} key\n * @param {T} data\n */\nexport const saveCache = async (key: string, data: any) => {\n  return save(cacheKey(key), data);\n};\n\nexport const initStorage = (storage: Storage) => {\n  storage = storage;\n};\n"]}