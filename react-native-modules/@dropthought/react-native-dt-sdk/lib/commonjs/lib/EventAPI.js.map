{"version":3,"sources":["EventAPI.js"],"names":["EVENT_PATH","apiPostEvent","programId","feedbacks","source","metadata","createdTime","timeZone","axiosConfig","fetcher","fetcherInstance","params","method","authRequired","data","refId","map","feedback","dataId","questionId","dataValue","answers","dataType","type","otherFlag","metaData","request","then","response","console","log","success"],"mappings":";;;;;;;AAKA;;AAEA;;AACA;;AARA;AACA;AACA;AACA;AACA;AAMA,MAAMA,UAAU,GAAG,YAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,eAAeC,YAAf,CACL;AACEC,EAAAA,SADF;AAEEC,EAAAA,SAAS,GAAG,EAFd;AAGEC,EAAAA,MAAM,GAAG,KAHX;AAIEC,EAAAA,QAAQ,GAAG,EAJb;AAKEC,EAAAA,WALF;AAMEC,EAAAA;AANF,CADK,EASLC,WAAW,GAAG,EATT,EAULC,OAAO,GAAGC,0BAVL,EAWL;AACA;AACA,QAAMC,MAAM,GAAG;AACbC,IAAAA,MAAM,EAAE,MADK;AAEbC,IAAAA,YAAY,EAAE,IAFD;AAGbC,IAAAA,IAAI,EAAE;AACJC,MAAAA,KAAK,EAAEb,SADH;AAEJY,MAAAA,IAAI,EAAEX,SAAS,CAACa,GAAV,CAAeC,QAAD,KAAe;AACjCC,QAAAA,MAAM,EAAED,QAAQ,CAACE,UADgB;AAEjCC,QAAAA,SAAS,EACP;AACA;AACA,0BAAMH,QAAQ,CAACI,OAAf,KAA2B,oBAAQJ,QAAQ,CAACI,OAAjB,CAA3B,GACI,CAAC,EAAD,CADJ,GAEIJ,QAAQ,CAACI,OAPkB;AAQjCC,QAAAA,QAAQ,EAAEL,QAAQ,CAACM,IARc;AASjCC,QAAAA,SAAS,EAAEP,QAAQ,CAACO;AATa,OAAf,CAAd,CAFF;AAaJC,MAAAA,QAAQ,EAAE;AACRrB,QAAAA,MADQ;AAER,WAAGC;AAFK,OAbN;AAiBJC,MAAAA,WAjBI;AAkBJC,MAAAA;AAlBI,KAHO;AAuBb,OAAGC;AAvBU,GAAf;AA0BA,SAAOC,OAAO,CAACiB,OAAR,CAAgB1B,UAAhB,EAA4BW,MAA5B,EAAoCgB,IAApC,CAA0CC,QAAD,IAAc;AAC5DC,IAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CF,QAA/C;;AACA,QAAIA,QAAQ,CAACd,IAAT,CAAciB,OAAd,KAA0B,KAA9B,EAAqC;AACnC,sCAAkBH,QAAlB;AACA;AACD;;AACD,WAAOA,QAAQ,CAACd,IAAhB;AACD,GAPM,CAAP;AAQD;AAED;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/**\n * @description\n * https://docs.dropthought.com/docs/2_0/api.html#event\n * submit feedback\n */\nimport { isNil, isEmpty } from 'ramda';\n\nimport { fetcherInstance } from './APIClient';\nimport { throwRequestError } from './Fetcher';\n\nconst EVENT_PATH = '/api/event';\n\n/**\n * post event (feedback)\n * @param {{\n *   programId: string,\n *   feedbacks: Feedback[],\n *   source?: EventAPISourceType,\n *   metadata: any,\n *   createdTime: string,\n *   timeZone: string\n * }} param0\n * @param {AxiosRequestConfig} axiosConfig\n * @param {Fetcher=} fetcher\n * @returns {Promise<Survey>}\n */\nexport async function apiPostEvent(\n  {\n    programId,\n    feedbacks = [],\n    source = 'api',\n    metadata = {},\n    createdTime,\n    timeZone,\n  },\n  axiosConfig = {},\n  fetcher = fetcherInstance\n) {\n  /** @type {AxiosRequestConfig} */\n  const params = {\n    method: 'POST',\n    authRequired: true,\n    data: {\n      refId: programId,\n      data: feedbacks.map((feedback) => ({\n        dataId: feedback.questionId,\n        dataValue:\n          // for not answered question, server doesn't allow empty array for dataValue\n          // it accept [''] for not answered question\n          isNil(feedback.answers) || isEmpty(feedback.answers)\n            ? ['']\n            : feedback.answers,\n        dataType: feedback.type,\n        otherFlag: feedback.otherFlag,\n      })),\n      metaData: {\n        source,\n        ...metadata,\n      },\n      createdTime,\n      timeZone,\n    },\n    ...axiosConfig,\n  };\n\n  return fetcher.request(EVENT_PATH, params).then((response) => {\n    console.log('[RN] Upload feedback response: ', response);\n    if (response.data.success === false) {\n      throwRequestError(response);\n      return;\n    }\n    return response.data;\n  });\n}\n\n/**\n * @typedef {import('./Fetcher').RequestConfig} RequestConfig\n * @typedef {import('./Fetcher').Fetcher} Fetcher\n * @typedef {import('../data').Feedback} Feedback\n * @typedef {import('../data').SurveyFeedback} SurveyFeedback\n * @typedef {import('../data').EventAPISourceType} EventAPISourceType\n */\n"]}