{"version":3,"sources":["EventAPI.js"],"names":["EVENT_PATH","apiPostEvent","programId","feedbacks","source","metadata","createdTime","timeZone","axiosConfig","fetcher","fetcherInstance","params","method","authRequired","data","refId","map","feedback","dataId","questionId","dataValue","answers","dataType","type","otherFlag","metaData","request","then","response","success"],"mappings":";;;;;;;AAKA;;AAEA;;AACA;;AARA;AACA;AACA;AACA;AACA;AAMA,MAAMA,UAAU,GAAG,YAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,eAAeC,YAAf,CACH;AAACC,EAAAA,SAAD;AAAYC,EAAAA,SAAS,GAAG,EAAxB;AAA4BC,EAAAA,MAAM,GAAG,KAArC;AAA4CC,EAAAA,QAAQ,GAAG,EAAvD;AAA2DC,EAAAA,WAA3D;AAAwEC,EAAAA;AAAxE,CADG,EAEHC,WAAW,GAAG,EAFX,EAGHC,OAAO,GAAGC,0BAHP,EAIL;AACE;AACA,QAAMC,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE,MADG;AAEXC,IAAAA,YAAY,EAAE,IAFH;AAGXC,IAAAA,IAAI,EAAE;AACNC,MAAAA,KAAK,EAAEb,SADD;AAENY,MAAAA,IAAI,EAAEX,SAAS,CAACa,GAAV,CAAeC,QAAD,KAAe;AAC3BC,QAAAA,MAAM,EAAED,QAAQ,CAACE,UADU;AAE3BC,QAAAA,SAAS,EACL;AACA;AACA,0BAAMH,QAAQ,CAACI,OAAf,KAA2B,oBAAQJ,QAAQ,CAACI,OAAjB,CAA3B,GACM,CAAC,EAAD,CADN,GAEMJ,QAAQ,CAACI,OAPQ;AAQ3BC,QAAAA,QAAQ,EAAEL,QAAQ,CAACM,IARQ;AAS3BC,QAAAA,SAAS,EAAEP,QAAQ,CAACO;AATO,OAAf,CAAd,CAFA;AAaFC,MAAAA,QAAQ,EAAE;AACNrB,QAAAA,MADM;AAEN,WAAGC;AAFG,OAbR;AAiBFC,MAAAA,WAjBE;AAkBFC,MAAAA;AAlBE,KAHK;AAuBX,OAAGC;AAvBQ,GAAf;AA0BA,SAAOC,OAAO,CAACiB,OAAR,CAAgB1B,UAAhB,EAA4BW,MAA5B,EAAoCgB,IAApC,CAA0CC,QAAD,IAAc;AAC1D,QAAIA,QAAQ,CAACd,IAAT,CAAce,OAAd,KAA0B,KAA9B,EAAqC;AACjC,sCAAkBD,QAAlB;AACA;AACH;;AACD,WAAOA,QAAQ,CAACd,IAAhB;AACH,GANM,CAAP;AAOH;AAED;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/**\n * @description\n * https://docs.dropthought.com/docs/2_0/api.html#event\n * submit feedback\n */\nimport {isNil, isEmpty} from 'ramda'\n\nimport {fetcherInstance} from './APIClient'\nimport {throwRequestError} from './Fetcher'\n\nconst EVENT_PATH = '/api/event'\n\n/**\n * post event (feedback)\n * @param {{\n *   programId: string,\n *   feedbacks: Feedback[],\n *   source?: EventAPISourceType,\n *   metadata: any,\n *   createdTime: string,\n *   timeZone: string\n * }} param0\n * @param {AxiosRequestConfig} axiosConfig\n * @param {Fetcher=} fetcher\n * @returns {Promise<Survey>}\n */\nexport async function apiPostEvent(\n    {programId, feedbacks = [], source = 'api', metadata = {}, createdTime, timeZone},\n    axiosConfig = {},\n    fetcher = fetcherInstance,\n) {\n    /** @type {AxiosRequestConfig} */\n    const params = {\n        method: 'POST',\n        authRequired: true,\n        data: {\n        refId: programId,\n        data: feedbacks.map((feedback) => ({\n                dataId: feedback.questionId,\n                dataValue:\n                    // for not answered question, server doesn't allow empty array for dataValue\n                    // it accept [''] for not answered question\n                    isNil(feedback.answers) || isEmpty(feedback.answers)\n                        ? ['']\n                        : feedback.answers,\n                dataType: feedback.type,\n                otherFlag: feedback.otherFlag,\n            })),\n            metaData: {\n                source,\n                ...metadata,\n            },\n            createdTime,\n            timeZone,\n        },\n        ...axiosConfig,\n    }\n\n    return fetcher.request(EVENT_PATH, params).then((response) => {\n        if (response.data.success === false) {\n            throwRequestError(response)\n            return\n        }\n        return response.data\n    })\n}\n\n/**\n * @typedef {import('./Fetcher').RequestConfig} RequestConfig\n * @typedef {import('./Fetcher').Fetcher} Fetcher\n * @typedef {import('../data').Feedback} Feedback\n * @typedef {import('../data').SurveyFeedback} SurveyFeedback\n * @typedef {import('../data').EventAPISourceType} EventAPISourceType\n */\n"]}