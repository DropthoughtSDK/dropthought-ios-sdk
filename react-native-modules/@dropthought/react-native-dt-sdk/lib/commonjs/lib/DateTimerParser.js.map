{"version":3,"sources":["DateTimerParser.js"],"names":["fromAPIDateStrToJS","dateStr","yyyy_MM_dd","HH_mm_ss","split","yyyy","MM","dd","map","Number","HH","mm","ss","Date","fromJSToAPIDateStr","timestamp","undefined","date","padStartWithZero","getFullYear","toString","getMonth","getDate","getHours","getMinutes","getSeconds","join","targetString","maxLength","length","Array","_"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACQ,MAAMA,kBAAkB,GAAIC,OAAD,IAAa;AAC9C,QAAM,CAACC,UAAD,EAAaC,QAAb,IAAyBF,OAAO,CAACG,KAAR,CAAc,GAAd,CAA/B;AACA,QAAM,CAACC,IAAD,EAAOC,EAAP,EAAWC,EAAX,IAAiBL,UAAU,CAACE,KAAX,CAAiB,GAAjB,EAAsBI,GAAtB,CAA0BC,MAA1B,CAAvB;AACA,QAAM,CAACC,EAAD,EAAKC,EAAL,EAASC,EAAT,IAAeT,QAAQ,CAACC,KAAT,CAAe,GAAf,EAAoBI,GAApB,CAAwBC,MAAxB,CAArB;AACA,SAAO,IAAII,IAAJ,CAASR,IAAT,EAAeC,EAAE,GAAG,CAApB,EAAuBC,EAAvB,EAA2BG,EAA3B,EAA+BC,EAA/B,EAAmCC,EAAnC,CAAP;AACD,CALO;AAOR;AACA;AACA;AACA;AACA;;;;;AACO,MAAME,kBAAkB,GAAIC,SAAD,IAAe;AAC/C,MAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;AACjC,WAAOC,SAAP;AACD;;AAED,QAAMC,IAAI,GAAG,IAAIJ,IAAJ,CAASE,SAAT,CAAb;AACA,QAAMV,IAAI,GAAGa,gBAAgB,CAACD,IAAI,CAACE,WAAL,GAAmBC,QAAnB,EAAD,EAAgC,CAAhC,CAA7B;AACA,QAAMd,EAAE,GAAGY,gBAAgB,CAAC,CAACD,IAAI,CAACI,QAAL,KAAgB,CAAjB,EAAoBD,QAApB,EAAD,EAAiC,CAAjC,CAA3B;AACA,QAAMb,EAAE,GAAGW,gBAAgB,CAACD,IAAI,CAACK,OAAL,GAAeF,QAAf,EAAD,EAA4B,CAA5B,CAA3B;AACA,QAAMV,EAAE,GAAGQ,gBAAgB,CAACD,IAAI,CAACM,QAAL,GAAgBH,QAAhB,EAAD,EAA6B,CAA7B,CAA3B;AACA,QAAMT,EAAE,GAAGO,gBAAgB,CAACD,IAAI,CAACO,UAAL,GAAkBJ,QAAlB,EAAD,EAA+B,CAA/B,CAA3B;AACA,QAAMR,EAAE,GAAGM,gBAAgB,CAACD,IAAI,CAACQ,UAAL,GAAkBL,QAAlB,EAAD,EAA+B,CAA/B,CAA3B;AAEA,SAAQ,GAAE,CAACf,IAAD,EAAMC,EAAN,EAASC,EAAT,EAAamB,IAAb,CAAkB,GAAlB,CAAuB,IAAG,CAAChB,EAAD,EAAIC,EAAJ,EAAOC,EAAP,EAAWc,IAAX,CAAgB,GAAhB,CAAqB,EAAzD;AACD,CAdM;AAgBP;AACA;AACA;AACA;AACA;AACA;;;;;AACA,MAAMR,gBAAgB,GAAG,CAACS,YAAD,EAAeC,SAAf,KAA6B;AACpD,MAAGD,YAAY,CAACE,MAAb,IAAuBD,SAA1B,EAAqC;AACnC,WAAOD,YAAP;AACD;;AACD,SAAQ,GAAE,CAAC,GAAGG,KAAK,CAACF,SAAS,GAAGD,YAAY,CAACE,MAA1B,CAAT,EAA4CrB,GAA5C,CAAgDuB,CAAC,IAAI,GAArD,EAA0DL,IAA1D,CAA+D,EAA/D,CAAmE,GAAEC,YAAa,EAA5F;AACD,CALD","sourcesContent":["/**\n * parse api date string to JS\n * @param {string} dateStr 'yyyy-MM-dd HH:mm:ss' ex. \"2019-11-06 07:24:05\"\n * @returns {Date}\n */\n export const fromAPIDateStrToJS = (dateStr) => {\n  const [yyyy_MM_dd, HH_mm_ss] = dateStr.split(' ');\n  const [yyyy, MM, dd] = yyyy_MM_dd.split('-').map(Number);\n  const [HH, mm, ss] = HH_mm_ss.split(':').map(Number);\n  return new Date(yyyy, MM - 1, dd, HH, mm, ss);\n};\n\n/**\n * parse api date number to JS Date\n * @param {number|undefined} timestamp\n * @returns {string|undefined} 'yyyy-MM-dd HH:mm:ss' ex. \"2019-11-06 07:24:05\"\n */\nexport const fromJSToAPIDateStr = (timestamp) => {\n  if (typeof timestamp !== 'number') {\n    return undefined\n  }\n\n  const date = new Date(timestamp)\n  const yyyy = padStartWithZero(date.getFullYear().toString(), 4)\n  const MM = padStartWithZero((date.getMonth()+1).toString(), 2)\n  const dd = padStartWithZero(date.getDate().toString(), 2)\n  const HH = padStartWithZero(date.getHours().toString(), 2)\n  const mm = padStartWithZero(date.getMinutes().toString(), 2)\n  const ss = padStartWithZero(date.getSeconds().toString(), 2)\n\n  return `${[yyyy,MM,dd].join('-')} ${[HH,mm,ss].join(':')}`\n}\n\n/**\n * padStart string with 0\n * @param {string} targetString\n * @param {number} maxLength\n * @returns {string}\n */\nconst padStartWithZero = (targetString, maxLength) => {\n  if(targetString.length >= maxLength) {\n    return targetString\n  }\n  return `${[...Array(maxLength - targetString.length)].map(_ => '0').join('')}${targetString}`\n}\n"]}