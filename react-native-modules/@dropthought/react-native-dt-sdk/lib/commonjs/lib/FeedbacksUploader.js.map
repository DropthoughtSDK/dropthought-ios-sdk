{"version":3,"sources":["FeedbacksUploader.js"],"names":["KEY_FEEDBACKS","KEY_FAILED_FEEDBACKS_DURING_PROCESSING","KEY_FAILED_REASONS_DURING_PROCESSING","FeedbacksQueue","QueueStorage","key","encrypted","FailedFeedbacksQueue","FailedReasonsQueue","sendFeedback","surveyFeedback","programId","surveyId","feedbacks","metadata","createdTime","timeZone","UploaderStates","Idle","Processing","waitUntil","check","round","Promise","resolve","timeout","setTimeout","CreateFeedbacksUploader","initialized","state","numOfProcessed","userCanceled","subscriptions","publish","queuedFeedbacks","failedFeedbacksDuringProcessing","failedReasons","getAll","forEach","subscription","subscriber","uploadStatus","numOfFeedbacksProcessed","uploadSingle","feedback","front","err","console","log","message","enqueue","status","response","dequeue","uploadDone","retryFailed","failedFeedbacks","clear","uploadStart","uploadContinue","cancel","all","initialize","undefined","upload","subscribe","id","push","removeSubscription","filter","sub","feedbackUploader"],"mappings":"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","sourcesContent":["import { isEmpty } from 'ramda';\nimport uuidv4 from 'uuid/v4';\n\nimport { apiPostEvent } from './API';\n\nimport QueueStorage from './QueueStorage';\n\nconst KEY_FEEDBACKS = 'KEY_FEEDBACKS';\nconst KEY_FAILED_FEEDBACKS_DURING_PROCESSING =\n  'KEY_FAILED_FEEDBACKS_DURING_PROCESSING';\nconst KEY_FAILED_REASONS_DURING_PROCESSING =\n  'KEY_FAILED_REASONS_DURING_PROCESSING';\n\n/** @type {QueueStorage<SurveyFeedback>} */\nexport const FeedbacksQueue = new QueueStorage({\n  key: KEY_FEEDBACKS,\n  encrypted: true,\n});\n/** @type {QueueStorage<SurveyFeedback>} */\nexport const FailedFeedbacksQueue = new QueueStorage({\n  key: KEY_FAILED_FEEDBACKS_DURING_PROCESSING,\n  encrypted: true,\n});\n/** @type {QueueStorage<FailedReason>} */\nexport const FailedReasonsQueue = new QueueStorage({\n  key: KEY_FAILED_REASONS_DURING_PROCESSING,\n  encrypted: true,\n});\n\n/**\n * @param {SurveyFeedback} surveyFeedback\n * @param {*} cancelSource\n */\nasync function sendFeedback(surveyFeedback) {\n  return apiPostEvent({\n    programId: surveyFeedback.surveyId,\n    feedbacks: surveyFeedback.feedbacks,\n    metadata: surveyFeedback.metadata,\n    createdTime: surveyFeedback.createdTime,\n    timeZone: surveyFeedback.timeZone,\n  });\n}\n\n/** @enum {'idle' | 'processing' } */\nexport const UploaderStates = {\n  Idle: 'idle',\n  Processing: 'processing',\n};\n\n/**\n * @typedef {Object} FeedbackUploaderSubscription\n * @property {string} id\n * @property {FeedbackUploaderSubscriber} subscriber\n */\n/**\n * @typedef {Object} FeedbackUploaderPublishState\n * @property {UploaderStates} uploadStatus\n * @property {number} numOfFeedbacksProcessed\n * @property {SurveyFeedback[]} queuedFeedbacks\n * @property {SurveyFeedback[]} failedFeedbacksDuringProcessing\n * @property {FailedReason[]} failedReasons\n * @property {boolean} userCanceled\n */\n/**\n * @typedef {(state: FeedbackUploaderPublishState) => void} FeedbackUploaderSubscriber\n */\n\n/**\n * @param {() => boolean} check\n * @returns\n */\nconst waitUntil = async (check) => {\n  let round = 0;\n  return new Promise((resolve) => {\n    const timeout = () => {\n      round++;\n      setTimeout(() => {\n        if (check() || round >= 10) {\n          resolve();\n          return;\n        } else {\n          timeout();\n        }\n      }, 500);\n    };\n    timeout();\n  });\n};\n\nfunction CreateFeedbacksUploader() {\n  /** @type {boolean | null | undefined} */\n  let initialized = null; // null -> not start yet, undefined -> in progress, true -> finished\n  let state = UploaderStates.Idle;\n  let numOfProcessed = 0;\n  let userCanceled = false;\n\n  /** @type {FeedbackUploaderSubscription[]} */\n  let subscriptions = [];\n\n  function publish() {\n    if (isEmpty(subscriptions)) return;\n\n    const [queuedFeedbacks, failedFeedbacksDuringProcessing, failedReasons] = [\n      FeedbacksQueue.getAll(),\n      FailedFeedbacksQueue.getAll(),\n      FailedReasonsQueue.getAll(),\n    ];\n\n    subscriptions.forEach((subscription) => {\n      if (\n        subscription.subscriber &&\n        typeof subscription.subscriber === 'function'\n      ) {\n        subscription.subscriber({\n          uploadStatus: state,\n          numOfFeedbacksProcessed: numOfProcessed,\n          queuedFeedbacks,\n          failedFeedbacksDuringProcessing,\n          failedReasons,\n          userCanceled,\n        });\n      }\n    });\n  }\n\n  async function uploadSingle() {\n    // if user cancel, stop process the next feedback\n    if (userCanceled) {\n      return;\n    }\n\n    const feedback = FeedbacksQueue.front();\n\n    // no more feedback in the queue, stop\n    if (!feedback) return;\n\n    try {\n      await sendFeedback(feedback);\n      numOfProcessed++;\n    } catch (err) {\n      console.log(\n        'failed when sending feedback',\n        feedback.surveyId,\n        err.message\n      );\n      // failed, add to failed queue\n      FailedFeedbacksQueue.enqueue(feedback);\n      FailedReasonsQueue.enqueue({\n        message: err.message,\n        status: err.response?.status,\n      });\n    } finally {\n      FeedbacksQueue.dequeue();\n\n      publish();\n      await uploadSingle();\n    }\n  }\n\n  function uploadDone() {\n    state = UploaderStates.Idle;\n    publish();\n  }\n\n  function retryFailed() {\n    // get failed feedbacks and save to processing queue\n    // clear failed feedback queue\n    const failedFeedbacks = FailedFeedbacksQueue.getAll();\n    FeedbacksQueue.enqueue(failedFeedbacks);\n    FailedFeedbacksQueue.clear();\n    FailedReasonsQueue.clear();\n  }\n\n  function uploadStart() {\n    // reset states\n    state = UploaderStates.Processing;\n    numOfProcessed = 0;\n    userCanceled = false;\n\n    retryFailed();\n    publish();\n  }\n\n  function uploadContinue() {\n    retryFailed();\n    publish();\n  }\n\n  /**\n   * @public\n   */\n  function cancel() {\n    userCanceled = true;\n    publish();\n  }\n\n  /**\n   * @public\n   */\n  async function clear() {\n    cancel();\n    await Promise.all([\n      FeedbacksQueue.clear(),\n      FailedFeedbacksQueue.clear(),\n      FailedReasonsQueue.clear(),\n    ]);\n  }\n\n  /**\n   * @public\n   */\n  async function initialize() {\n    // only initialize once\n    if (initialized === true) return;\n    if (typeof initialized === 'undefined') {\n      return waitUntil(() => initialized === true);\n    }\n    initialized = undefined;\n\n    // check queues are initialized\n    await Promise.all([\n      FeedbacksQueue.initialize(),\n      FailedFeedbacksQueue.initialize(),\n      FailedReasonsQueue.initialize(),\n    ]);\n    initialized = true;\n  }\n\n  /**\n   * @public\n   */\n  async function upload() {\n    if (initialized !== true) return;\n\n    if (state === UploaderStates.Processing) {\n      // upload is in process\n      uploadContinue();\n      return;\n    }\n\n    uploadStart();\n\n    // upload feedback one by one\n    await uploadSingle();\n\n    // all the feedbacks are processed\n    uploadDone();\n  }\n\n  /**\n   * @public\n   * @param {FeedbackUploaderSubscriber} subscriber\n   */\n  function subscribe(subscriber) {\n    const id = uuidv4();\n    const subscription = {\n      id,\n      subscriber,\n    };\n    subscriptions.push(subscription);\n    publish();\n    return function removeSubscription() {\n      subscriptions = subscriptions.filter((sub) => sub.id !== id);\n    };\n  }\n\n  return {\n    upload,\n    subscribe,\n    cancel,\n    clear,\n    initialize,\n  };\n}\n\n/**\n * @description singleton uploader\n * @example\n *     // to upload\n *     feedbackUploader.upload()\n *\n *     // to cancel\n *     feedbackUploader.cancel()\n *\n *     // to clear all the saved unsent feedbacks\n *     feedbackUploader.clear()\n *\n *     // to subscribe state\n *     const unSubscribe = feedbackUploader.subscribe( state => {\n *         console.log(state)\n *         // check type FeedbackUploaderPublishState\n *     })\n *     // to unsubscribe\n *     unSubscribe()\n */\nexport const feedbackUploader = CreateFeedbacksUploader();\n\n/**@typedef {import('../data').Feedback} Feedback */\n/**@typedef {import('../data').SurveyFeedback} SurveyFeedback */\n\n/**\n * @typedef {Object} FailedReason\n * @property {string} message\n * @property {number|undefined} status\n */\n"]}