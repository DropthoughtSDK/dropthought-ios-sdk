{"version":3,"sources":["initialize.ts"],"names":["initializeWithAPIKey","param","apiKey","baseURL","storage","sdkFetcher","init","feedbackUploader","initialize"],"mappings":";;;;;;;AACA;;AAGA;;AAGA;;AAEA;;AATA;AAGA;AAGA;AAKO,eAAeA,oBAAf,CAAoCC,KAApC,EAIJ;AACD,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,OAAV;AAAmBC,IAAAA;AAAnB,MAA+BH,KAArC;;AACAI,kBAAWC,IAAX,CAAgB;AACdH,IAAAA,OADc;AAEdD,IAAAA;AAFc,GAAhB,EAFC,CAMD;;;AACA,4BAAYE,OAAZ;AACA,QAAM,kCAAWF,MAAX,EAAmBE,OAAnB,CAAN;AACA,QAAMG,oCAAiBC,UAAjB,EAAN;AACD","sourcesContent":["// @ts-ignore\nimport { sdkFetcher } from './lib/API';\n\n// @ts-ignore\nimport { initialize } from './lib/encrypted-storage';\n\n// @ts-ignore\nimport { feedbackUploader } from './lib/FeedbacksUploader';\n\nimport { initStorage, Storage } from './lib/Storage';\n\nexport async function initializeWithAPIKey(param: {\n  apiKey: string;\n  baseURL?: string;\n  storage: Storage;\n}) {\n  const { apiKey, baseURL, storage } = param;\n  sdkFetcher.init({\n    baseURL,\n    apiKey,\n  });\n  // storage setting\n  initStorage(storage);\n  await initialize(apiKey, storage);\n  await feedbackUploader.initialize();\n}\n"]}