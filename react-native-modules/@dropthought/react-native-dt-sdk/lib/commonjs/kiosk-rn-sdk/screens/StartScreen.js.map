{"version":3,"sources":["StartScreen.js"],"names":["checkSurveyStatus","surveyState","surveyStartDate","surveyEndDate","imageType","PlaceholderImageTypes","ProgramExpired","ProgramScheduled","ProgramUnavailable","now","Date","StartScreen","props","onStart","survey","changeLanguage","state","surveyEndDateStr","surveyStartDateStr","onLanguageSelectHandler","React","useCallback","language","i18n","t"],"mappings":";;;;;;;AAAA;;AACA;;AAMA;;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,iBAAiB,GAAG,CAACC,WAAD,EAAcC,eAAd,EAA+BC,aAA/B,KAAiD;AACzE,MAAIC,SAAJ;;AACA,UAAQH,WAAR;AACE,SAAK,QAAL;AACEG,MAAAA,SAAS,GAAG,IAAZ;AACA;;AACF,SAAK,SAAL;AACEA,MAAAA,SAAS,GAAGC,qCAAsBC,cAAlC;AACA;;AACF,SAAK,WAAL;AACEF,MAAAA,SAAS,GAAGC,qCAAsBE,gBAAlC;AACA;;AACF,SAAK,QAAL;AACA;AACEH,MAAAA,SAAS,GAAGC,qCAAsBG,kBAAlC;AAZJ,GAFyE,CAgBzE;;;AACA,MAAI,CAACJ,SAAL,EAAgB;AACd,UAAMK,GAAG,GAAG,IAAIC,IAAJ,EAAZ;;AACA,QAAID,GAAG,GAAGP,eAAV,EAA2B;AACzBE,MAAAA,SAAS,GAAGC,qCAAsBE,gBAAlC;AACD,KAFD,MAEO,IAAIE,GAAG,GAAGN,aAAV,EAAyB;AAC9BC,MAAAA,SAAS,GAAGC,qCAAsBC,cAAlC;AACD;AACF;;AACD,SAAOF,SAAP;AACD,CA1BD;AA4BA;AACA;AACA;AACA;;;AACA,MAAMO,WAAW,GAAIC,KAAD,IAAW;AAC7B,QAAM;AAAEC,IAAAA;AAAF,MAAcD,KAApB;AACA,QAAM;AAAEE,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAA6B,+BAAnC;AACA,QAAM;AACJC,IAAAA,KAAK,EAAEf,WADH;AAEJE,IAAAA,aAAa,EAAEc,gBAFX;AAGJf,IAAAA,eAAe,EAAEgB;AAHb,MAIFJ,MAJJ;AAKA,QAAMZ,eAAe,GAAG,yCAAmBgB,kBAAnB,CAAxB;AACA,QAAMf,aAAa,GAAG,yCAAmBc,gBAAnB,CAAtB;;AAEA,QAAME,uBAAuB,GAAGC,eAAMC,WAAN,CAC7BC,QAAD,IAAc;AACZP,IAAAA,cAAc,CAACO,QAAD,CAAd;AACD,GAH6B,EAI9B,CAACP,cAAD,CAJ8B,CAAhC,CAX6B,CAkB7B;;;AACA,QAAMX,SAAS,GAAGJ,iBAAiB,CACjCC,WADiC,EAEjCC,eAFiC,EAGjCC,aAHiC,CAAnC;;AAKA,MAAIC,SAAJ,EAAe;AACb;AACA,wBACE,6BAAC,gCAAD;AACE,MAAA,SAAS,EAAEA,SADb;AAEE,MAAA,OAAO,EAAEmB,oBAAKC,CAAL,CAAO,kCAAP;AAFX,MADF;AAMD;;AAED,sBACE,6BAAC,gCAAD;AACE,IAAA,MAAM,EAAEV,MADV;AAEE,IAAA,OAAO,EAAED,OAFX;AAGE,IAAA,gBAAgB,EAAEM;AAHpB,IADF;AAOD,CAzCD;;eA2CeR,W;AAEf;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport {\n  StartScreenLayout,\n  PlaceholderImageTypes,\n  PlaceholderScreen,\n  i18n,\n} from '@dropthought/react-native-ui';\nimport { useSurveyContext } from '../contexts/survey';\nimport { fromAPIDateStrToJS } from '../../lib/DateTimerParser';\n\n/**\n *\n * @param {import('../../data').ProgramStateType} surveyState\n * @param {Date} surveyStartDate\n * @param {Date} surveyEndDate\n */\nconst checkSurveyStatus = (surveyState, surveyStartDate, surveyEndDate) => {\n  let imageType;\n  switch (surveyState) {\n    case 'active':\n      imageType = null;\n      break;\n    case 'expired':\n      imageType = PlaceholderImageTypes.ProgramExpired;\n      break;\n    case 'scheduled':\n      imageType = PlaceholderImageTypes.ProgramScheduled;\n      break;\n    case 'drafts':\n    default:\n      imageType = PlaceholderImageTypes.ProgramUnavailable;\n  }\n  // still need to check the start-end time\n  if (!imageType) {\n    const now = new Date();\n    if (now < surveyStartDate) {\n      imageType = PlaceholderImageTypes.ProgramScheduled;\n    } else if (now > surveyEndDate) {\n      imageType = PlaceholderImageTypes.ProgramExpired;\n    }\n  }\n  return imageType;\n};\n\n/**\n * @type {React.FunctionComponent<ScreenProps>}\n * @param {ScreenProps} props\n */\nconst StartScreen = (props) => {\n  const { onStart } = props;\n  const { survey, changeLanguage } = useSurveyContext();\n  const {\n    state: surveyState,\n    surveyEndDate: surveyEndDateStr,\n    surveyStartDate: surveyStartDateStr,\n  } = survey;\n  const surveyStartDate = fromAPIDateStrToJS(surveyStartDateStr);\n  const surveyEndDate = fromAPIDateStrToJS(surveyEndDateStr);\n\n  const onLanguageSelectHandler = React.useCallback(\n    (language) => {\n      changeLanguage(language);\n    },\n    [changeLanguage]\n  );\n\n  // render placeholder\n  const imageType = checkSurveyStatus(\n    surveyState,\n    surveyStartDate,\n    surveyEndDate\n  );\n  if (imageType) {\n    // need to render placeholder\n    return (\n      <PlaceholderScreen\n        imageType={imageType}\n        message={i18n.t('start-survey:placeholder-message')}\n      />\n    );\n  }\n\n  return (\n    <StartScreenLayout\n      survey={survey}\n      onStart={onStart}\n      onLanguageSelect={onLanguageSelectHandler}\n    />\n  );\n};\n\nexport default StartScreen;\n\n/**\n * @typedef {Object} ScreenProps\n * @property {() => void} onStart\n */\n"]}