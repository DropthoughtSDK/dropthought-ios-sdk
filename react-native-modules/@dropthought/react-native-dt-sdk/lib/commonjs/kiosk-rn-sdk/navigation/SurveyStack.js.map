{"version":3,"sources":["SurveyStack.tsx"],"names":["noData","a","Stack","survey","onClose","themeColor","surveyProperty","hexCode","visiblePageIds","setVisiblePageIds","React","useState","endScreenvisible","setEndScreenvisible","surveyFeedback","setSurveyFeedback","undefined","error","setError","metadata","run","isPending","loading","deferFn","submitFeedback","onResolve","onReject","rejectedError","handleNextPage","useCallback","nextPageIndex","pageOrder","length","prevPageIds","nextPageId","filter","prevPageId","handleStart","handlePrevPage","slice","handleSubmit","feedback","timeZone","NativeModules","DtSdk","getConstants","createdTime","Date","now","styles","flexOne","surveyName","map","pageId","pageIndex","includes","SurveyStack","pages","surveyStartDate","surveyEndDate","PlaceholderImageTypes","ProgramUnavailable","i18n","t","StyleSheet","create","flex"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAOA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAOA,MAAMA,MAAM,GAAIC,CAAD,IAAY,kBAAMA,CAAN,KAAY,oBAAQA,CAAR,CAAvC;;AAEA,MAAMC,KAA0C,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgB;AACjE,QAAM;AAAEC,IAAAA;AAAF,MAAc,+BAApB;AACA,QAAMC,UAAU,GAAGF,MAAM,CAACG,cAAP,CAAsBC,OAAzC;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCC,KAAK,CAACC,QAAN,CAAe,EAAf,CAA5C;AACA,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CH,KAAK,CAACC,QAAN,CAAe,KAAf,CAAhD;AACA,QAAM,CAACG,cAAD,EAAiBC,iBAAjB,IAAsCL,KAAK,CAACC,QAAN,CAAeK,SAAf,CAA5C;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,KAAK,CAACC,QAAN,EAA1B;AACA,QAAMQ,QAAQ,GAAG,+BAAjB;AACA,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,SAAS,EAAEC;AAAlB,MAA8B,0BAAS;AAC3CC,IAAAA,OAAO,EAAEC,wBADkC;AAE3CC,IAAAA,SAAS,EAAE,MAAM;AACfZ,MAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACD,KAJ0C;AAK3Ca,IAAAA,QAAQ,EAAGC,aAAD,IAAmB;AAC3BT,MAAAA,QAAQ,CAACS,aAAD,CAAR;AACAd,MAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACD;AAR0C,GAAT,CAApC;AAWA,QAAMe,cAAc,GAAGlB,KAAK,CAACmB,WAAN,CACpBC,aAAD,IAAmB;AACjB,QAAIA,aAAa,GAAG3B,MAAM,CAAC4B,SAAP,CAAiBC,MAArC,EAA6C;AAC3CvB,MAAAA,iBAAiB,CAAEwB,WAAD,IAAiB;AACjC,cAAMC,UAAU,GAAG/B,MAAM,CAAC4B,SAAP,CAAiBD,aAAjB,CAAnB;AACA,eAAO,CACL,GAAGG,WAAW,CAACE,MAAZ,CACAC,UAAD,IAAwBA,UAAU,KAAKF,UADtC,CADE,EAILA,UAJK,CAAP;AAMD,OARgB,CAAjB;AASD;AACF,GAboB,EAcrB,CAAC/B,MAAM,CAAC4B,SAAR,CAdqB,CAAvB;AAiBA,QAAMM,WAAW,GAAG3B,KAAK,CAACmB,WAAN,CAAkB,MAAM;AAC1CD,IAAAA,cAAc,CAAC,CAAD,CAAd;AACD,GAFmB,EAEjB,CAACA,cAAD,CAFiB,CAApB;AAIA,QAAMU,cAAc,GAAG5B,KAAK,CAACmB,WAAN,CAAkB,MAAM;AAC7CpB,IAAAA,iBAAiB,CAAEwB,WAAD,IAAiBA,WAAW,CAACM,KAAZ,CAAkB,CAAlB,EAAqB,CAAC,CAAtB,CAAlB,CAAjB;AACD,GAFsB,EAEpB,EAFoB,CAAvB;AAIA,QAAMC,YAAY,GAAG9B,KAAK,CAACmB,WAAN,CAClBY,QAAD,IAAc;AACZ,UAAM;AAAEC,MAAAA;AAAF,QAAeC,2BAAcC,KAAd,CAAoBC,YAApB,EAArB;;AACA9B,IAAAA,iBAAiB,CAAC0B,QAAD,CAAjB;AACArB,IAAAA,GAAG,CAAC,EACF,GAAGqB,QADD;AAEFtB,MAAAA,QAFE;AAGF2B,MAAAA,WAAW,EAAE,yCAAmBC,IAAI,CAACC,GAAL,EAAnB,CAHX;AAIFN,MAAAA;AAJE,KAAD,CAAH;AAMD,GAVkB,EAWnB,CAACvB,QAAD,EAAWC,GAAX,CAXmB,CAArB;AAcA,sBACE,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAE6B,MAAM,CAACC;AAApB,kBACE,oBAAC,eAAD;AACE,IAAA,KAAK,EAAE/C,MAAM,CAACgD,UADhB;AAEE,IAAA,OAAO,EAAE/C,OAFX;AAGE,IAAA,UAAU,EAAEC;AAHd,IADF,eAME,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAE4C,MAAM,CAACC;AAApB,kBACE,oBAAC,sBAAD;AACE,IAAA,OAAO,MADT;AAEE,IAAA,OAAO,EAAE,CAACtC,gBAAD,IAAqBJ,cAAc,CAACwB,MAAf,KAA0B;AAF1D,kBAIE,oBAAC,oBAAD;AAAa,IAAA,OAAO,EAAEK;AAAtB,IAJF,CADF,EAOGlC,MAAM,CAAC4B,SAAP,CAAiBqB,GAAjB,CAAqB,CAACC,MAAD,EAAiBC,SAAjB,KAAuC;AAC3D,wBACE,oBAAC,sBAAD;AACE,MAAA,GAAG,EAAED,MADP;AAEE,MAAA,OAAO,EAAE7C,cAAc,CAAC+C,QAAf,CAAwBF,MAAxB,CAFX;AAGE,MAAA,OAAO,EAAE7C,cAAc,CAACA,cAAc,CAACwB,MAAf,GAAwB,CAAzB,CAAd,KAA8CqB;AAHzD,oBAKE,oBAAC,iCAAD;AACE,MAAA,MAAM,EAAElD,MADV;AAEE,MAAA,SAAS,EAAEmD,SAFb;AAGE,MAAA,UAAU,EAAE1B,cAHd;AAIE,MAAA,UAAU,EAAEU,cAJd;AAKE,MAAA,QAAQ,EAAEE;AALZ,MALF,CADF;AAeD,GAhBA,CAPH,eAwBE,oBAAC,sBAAD;AAAe,IAAA,OAAO,EAAE5B,gBAAxB;AAA0C,IAAA,OAAO,EAAEA;AAAnD,kBACE,oBAAC,kBAAD;AAAW,IAAA,KAAK,EAAEK,KAAlB;AAAyB,IAAA,cAAc,EAAEH;AAAzC,IADF,CAxBF,CANF,eAkCE,oBAAC,oCAAD;AAAuB,IAAA,OAAO,EAAEQ;AAAhC,IAlCF,CADF;AAsCD,CAhGD;;AAsGA,MAAMkC,WAAsD,GAAG,MAAM;AACnE,QAAM;AAAErD,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAsB,+BAA5B,CADmE,CAEnE;;AACA,MACEJ,MAAM,CAACG,MAAM,CAACsD,KAAR,CAAN,IACAzD,MAAM,CAACG,MAAM,CAACG,cAAR,CADN,IAEAN,MAAM,CAACG,MAAM,CAACuD,eAAR,CAFN,IAGA1D,MAAM,CAACG,MAAM,CAACwD,aAAR,CAJR,EAKE;AACA;AACA,wBACE,oBAAC,mBAAD;AAAY,MAAA,OAAO,EAAEvD;AAArB,oBACE,oBAAC,gCAAD;AACE,MAAA,SAAS,EAAEwD,qCAAsBC,kBADnC;AAEE,MAAA,OAAO,EAAEC,oBAAKC,CAAL,CAAO,kCAAP;AAFX,MADF,CADF;AAQD;;AACD,sBAAO,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAE5D;AAAf,IAAP;AACD,CApBD;;eAsBeqD,W;;;AAEf,MAAMP,MAAM,GAAGe,wBAAWC,MAAX,CAAkB;AAC/Bf,EAAAA,OAAO,EAAE;AACPgB,IAAAA,IAAI,EAAE;AADC;AADsB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet, NativeModules } from 'react-native';\nimport { isEmpty, isNil } from 'ramda';\nimport {\n  PlaceholderImageTypes,\n  PlaceholderScreen,\n  i18n,\n  SurveyScreenLayout,\n  ActivityIndicatorMask,\n} from '@dropthought/react-native-ui';\nimport { useAsync } from 'react-async';\nimport { useMetadata } from '../contexts/custom-props';\nimport StartScreen from '../screens/StartScreen';\nimport EndScreen from '../screens/EndScreen';\nimport FakeScreen from '../screens/FakeScreen';\nimport { useSurveyContext } from '../contexts/survey';\nimport { submitFeedback } from '../../lib/Feedback';\nimport ScreenWrapper from './ScreenWrapper';\nimport Header from './Header';\nimport { fromJSToAPIDateStr } from '../../lib/DateTimerParser';\nimport type { Survey } from '../../data';\n\ntype StackProps = {\n  survey: Survey;\n};\n\nconst noData = (a: any) => isNil(a) || isEmpty(a);\n\nconst Stack: React.FunctionComponent<StackProps> = ({ survey }) => {\n  const { onClose } = useSurveyContext();\n  const themeColor = survey.surveyProperty.hexCode;\n  const [visiblePageIds, setVisiblePageIds] = React.useState([]);\n  const [endScreenvisible, setEndScreenvisible] = React.useState(false);\n  const [surveyFeedback, setSurveyFeedback] = React.useState(undefined);\n  const [error, setError] = React.useState<Error | undefined>();\n  const metadata = useMetadata();\n  const { run, isPending: loading } = useAsync({\n    deferFn: submitFeedback,\n    onResolve: () => {\n      setEndScreenvisible(true);\n    },\n    onReject: (rejectedError) => {\n      setError(rejectedError);\n      setEndScreenvisible(true);\n    },\n  });\n\n  const handleNextPage = React.useCallback(\n    (nextPageIndex) => {\n      if (nextPageIndex < survey.pageOrder.length) {\n        setVisiblePageIds((prevPageIds) => {\n          const nextPageId = survey.pageOrder[nextPageIndex];\n          return [\n            ...prevPageIds.filter(\n              (prevPageId: string) => prevPageId !== nextPageId\n            ),\n            nextPageId,\n          ];\n        });\n      }\n    },\n    [survey.pageOrder]\n  );\n\n  const handleStart = React.useCallback(() => {\n    handleNextPage(0);\n  }, [handleNextPage]);\n\n  const handlePrevPage = React.useCallback(() => {\n    setVisiblePageIds((prevPageIds) => prevPageIds.slice(0, -1));\n  }, []);\n\n  const handleSubmit = React.useCallback(\n    (feedback) => {\n      const { timeZone } = NativeModules.DtSdk.getConstants();\n      setSurveyFeedback(feedback);\n      run({\n        ...feedback,\n        metadata,\n        createdTime: fromJSToAPIDateStr(Date.now()),\n        timeZone,\n      });\n    },\n    [metadata, run]\n  );\n\n  return (\n    <View style={styles.flexOne}>\n      <Header\n        title={survey.surveyName}\n        onClose={onClose}\n        themeColor={themeColor}\n      />\n      <View style={styles.flexOne}>\n        <ScreenWrapper\n          visible\n          isOnTop={!endScreenvisible && visiblePageIds.length === 0}\n        >\n          <StartScreen onStart={handleStart} />\n        </ScreenWrapper>\n        {survey.pageOrder.map((pageId: string, pageIndex: number) => {\n          return (\n            <ScreenWrapper\n              key={pageId}\n              visible={visiblePageIds.includes(pageId)}\n              isOnTop={visiblePageIds[visiblePageIds.length - 1] === pageId}\n            >\n              <SurveyScreenLayout\n                survey={survey}\n                pageIndex={pageIndex}\n                onNextPage={handleNextPage}\n                onPrevPage={handlePrevPage}\n                onSubmit={handleSubmit}\n              />\n            </ScreenWrapper>\n          );\n        })}\n        <ScreenWrapper visible={endScreenvisible} isOnTop={endScreenvisible}>\n          <EndScreen error={error} surveyFeedback={surveyFeedback} />\n        </ScreenWrapper>\n      </View>\n      <ActivityIndicatorMask loading={loading} />\n    </View>\n  );\n};\n\ntype SurveyStackProps = {\n  survey: Survey;\n};\n\nconst SurveyStack: React.FunctionComponent<SurveyStackProps> = () => {\n  const { survey, onClose } = useSurveyContext();\n  // check if survey data is valid\n  if (\n    noData(survey.pages) ||\n    noData(survey.surveyProperty) ||\n    noData(survey.surveyStartDate) ||\n    noData(survey.surveyEndDate)\n  ) {\n    // need to render placeholder\n    return (\n      <FakeScreen onClose={onClose}>\n        <PlaceholderScreen\n          imageType={PlaceholderImageTypes.ProgramUnavailable}\n          message={i18n.t('start-survey:placeholder-message')}\n        />\n      </FakeScreen>\n    );\n  }\n  return <Stack survey={survey} />;\n};\n\nexport default SurveyStack;\n\nconst styles = StyleSheet.create({\n  flexOne: {\n    flex: 1,\n  },\n});\n"]}