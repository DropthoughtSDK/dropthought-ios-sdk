{"version":3,"sources":["ScreenWrapper.tsx"],"names":["DefaultScreenWrapper","children","visible","isOnTop","localVisible","setLocalVisible","React","useState","width","animatedValueRef","useRef","Animated","Value","useEffect","timing","current","toValue","duration","useNativeDriver","easing","Easing","quad","start","StyleSheet","absoluteFill","styles","flexOne","whiteBackground","transform","translateX","interpolate","inputRange","outputRange","extrapolate","AndroidScreenWrapper","height","translateY","Platform","select","android","default","create","flex","backgroundColor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Platform, View, Animated, Easing, StyleSheet } from 'react-native';\nimport useWindowDimensions from './useWindowDimensions';\n\ntype Props = {\n  children: React.ReactNode;\n  visible: boolean;\n  isOnTop: boolean;\n};\n\nconst DefaultScreenWrapper: React.FunctionComponent<Props> = ({\n  children,\n  visible,\n  isOnTop,\n}) => {\n  const [localVisible, setLocalVisible] = React.useState(visible);\n  const { width } = useWindowDimensions();\n  const animatedValueRef = React.useRef(new Animated.Value(visible ? 0 : 1));\n\n  React.useEffect(() => {\n    Animated.timing(animatedValueRef.current, {\n      toValue: visible ? (isOnTop ? 0 : -0.3) : 1,\n      duration: 300,\n      useNativeDriver: true,\n      easing: Easing.quad,\n    }).start(() => {\n      setLocalVisible(visible);\n    });\n  }, [visible, isOnTop]);\n\n  return (\n    <View\n      style={StyleSheet.absoluteFill}\n      collapsable={false}\n      pointerEvents=\"box-none\"\n    >\n      <Animated.View\n        style={[\n          styles.flexOne,\n          styles.whiteBackground,\n          {\n            transform: [\n              {\n                translateX: animatedValueRef.current.interpolate({\n                  inputRange: [-1, 1],\n                  outputRange: [-1 * width, width],\n                  extrapolate: 'clamp',\n                }),\n              },\n            ],\n          },\n        ]}\n        collapsable={false}\n      >\n        {visible || localVisible ? children : null}\n      </Animated.View>\n    </View>\n  );\n};\n\nconst AndroidScreenWrapper: React.FunctionComponent<Props> = ({\n  children,\n  visible,\n  isOnTop,\n}) => {\n  const [localVisible, setLocalVisible] = React.useState(visible);\n  const { height } = useWindowDimensions();\n  const animatedValueRef = React.useRef(new Animated.Value(visible ? 0 : 1));\n\n  React.useEffect(() => {\n    Animated.timing(animatedValueRef.current, {\n      toValue: visible || isOnTop ? 0 : 1,\n      duration: 250,\n      useNativeDriver: true,\n      easing: Easing.quad,\n    }).start(() => {\n      setLocalVisible(visible);\n    });\n  }, [visible, isOnTop]);\n\n  return (\n    <View\n      style={StyleSheet.absoluteFill}\n      collapsable={false}\n      pointerEvents=\"box-none\"\n    >\n      <Animated.View\n        style={[\n          styles.flexOne,\n          styles.whiteBackground,\n          {\n            transform: [\n              {\n                translateY: animatedValueRef.current.interpolate({\n                  inputRange: [-1, 1],\n                  outputRange: [-1 * height, height],\n                  extrapolate: 'clamp',\n                }),\n              },\n            ],\n          },\n        ]}\n        collapsable={false}\n      >\n        {visible || localVisible ? children : null}\n      </Animated.View>\n    </View>\n  );\n};\n\nexport default Platform.select({\n  android: AndroidScreenWrapper,\n  default: DefaultScreenWrapper,\n});\n\nconst styles = StyleSheet.create({\n  flexOne: {\n    flex: 1,\n  },\n  whiteBackground: {\n    backgroundColor: 'white',\n  },\n});\n"]}