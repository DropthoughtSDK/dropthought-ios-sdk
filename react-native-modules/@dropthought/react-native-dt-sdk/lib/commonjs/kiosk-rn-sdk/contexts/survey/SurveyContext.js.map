{"version":3,"sources":["SurveyContext.js"],"names":["DT_ERR_MISSING_PARAMS","SurveyContext","React","createContext","survey","undefined","changeLanguage","useSurveyContext","useContext","useSurvey","surveyContextValue","preFetchImage","Promise","resolve","image","uri","width","height","surveyProperty","base64Reg","match","Image","prefetch","getSize","w","h","getProgram","surveyId","language","programCacheKey","Error","timeZone","NativeModules","DtSdk","getConstants","programId","timezone","timeout","state","i18n","useSelectedLanguageState","defaultLanguage","selectedLanguage","setSelectedLanguage","useState","prevSelectedLanguage","useRef","setSelectedLanguageWithBackup","useCallback","languageToSet","current","showAlert","title","message","Alert","alert","text","defaultOnCloseHandler","console","log","SurveyContextProvider","children","onClose","onRejectHandler","data","error","isPending","promiseFn","onReject","watchFn","props","prevProps","contextValue","useMemo","content","GlobalStyle","fullCenter","placeholderProps","imageType","PlaceholderImageTypes","ProgramUnavailable","NoInternet","flex1"],"mappings":"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","sourcesContent":["/**\n * @description\n * survey context expose two data: survey and changeLanguage function\n * it only renders children when survey is available,\n * therefore, the children would always be sure to have \"survey\" in context\n */\nimport * as React from 'react';\nimport {\n  View,\n  ActivityIndicator,\n  Image,\n  Alert,\n  NativeModules,\n} from 'react-native';\n\nimport { evolve, merge, isNil } from 'ramda';\nimport { useAsync } from 'react-async';\nimport {\n  i18n,\n  ActivityIndicatorMask,\n  GlobalStyle,\n  PlaceholderScreen,\n  PlaceholderImageTypes,\n} from '@dropthought/react-native-ui';\n\nimport FakeScreen from '../../screens/FakeScreen';\nimport { saveCache, loadCache } from '../../../lib/Storage';\nimport { apiGetProgramById } from '../../../lib/API';\nimport { isRequestTimeoutError, isNoInternetError } from '../../../lib/Fetcher';\n\nconst DT_ERR_MISSING_PARAMS = 'dt-missing-parameters';\n\n/**\n * @typedef {object} SurveyContextValue\n * @property {Survey} survey\n * @property {(language: string) => void} changeLanguage\n * @property {() => void} onClose\n */\n/** @typedef {import('../../../data').Survey} Survey */\n\n/** @type {React.Context<SurveyContextValue>} */\nconst SurveyContext = React.createContext({\n  survey: undefined,\n  changeLanguage: () => undefined,\n});\n\nexport const useSurveyContext = () => {\n  return React.useContext(SurveyContext);\n};\n\nexport const useSurvey = () => {\n  const surveyContextValue = React.useContext(SurveyContext);\n  return surveyContextValue.survey;\n};\n\n/**\n * pre-fetch survey's image, get the width and height of the survey image\n * @param {Survey} survey\n * @return {Promise<Survey>}\n */\nconst preFetchImage = (survey) =>\n  new Promise((resolve) => {\n    const { image: uri, width, height } = survey?.surveyProperty || {};\n    if (!uri || typeof uri !== 'string') {\n      resolve(survey);\n      return;\n    }\n\n    // pre-fetch the uri if it is not base64\n    const base64Reg = /^data:image\\/.+;base64/;\n    if (!uri.match(base64Reg)) {\n      Image.prefetch(uri);\n    }\n\n    // if height and width already existed\n    if (width && height) {\n      resolve(survey);\n      return;\n    }\n\n    // get image's width and height\n    Image.getSize(\n      uri,\n      (w, h) => {\n        // resolve the updated survey with surveyProperty merge with {width, height}\n        resolve(\n          evolve({\n            surveyProperty: merge({\n              width: w,\n              height: h,\n            }),\n          })(survey)\n        );\n      },\n      () => {\n        resolve(survey);\n      }\n    );\n  });\n\n/**\n * load the program data from cache or api\n * @param {{surveyId: string, language: string}} param0\n */\nconst getProgram = async ({ surveyId, language }) => {\n  const programCacheKey = `survey-${surveyId}-${language}`;\n  if (!surveyId) {\n    throw new Error(DT_ERR_MISSING_PARAMS);\n  }\n\n  const { timeZone } = NativeModules.DtSdk.getConstants();\n\n  /** @type {Survey} */\n  let survey = await loadCache(programCacheKey);\n  if (!survey) {\n    survey = await apiGetProgramById(\n      {\n        programId: surveyId,\n        language,\n        timezone: timeZone,\n      },\n      {\n        timeout: 10000,\n      }\n    );\n  }\n  // pre-fetch image\n  survey = await preFetchImage(survey);\n\n  // only save to cache when state is active\n  if (survey.state === 'active') {\n    await saveCache(programCacheKey, survey);\n  }\n\n  // change the i18n language\n  i18n.changeLanguage(survey.language);\n\n  return survey;\n};\n\n// we want to \"remember\" the previous selected language\n// so that, later when there's error, we could fallback to the previous selected language\nconst useSelectedLanguageState = (defaultLanguage) => {\n  const [selectedLanguage, setSelectedLanguage] =\n    React.useState(defaultLanguage);\n  const prevSelectedLanguage = React.useRef();\n\n  // backup the previous selected language\n  const setSelectedLanguageWithBackup = React.useCallback(\n    (languageToSet) => {\n      prevSelectedLanguage.current = selectedLanguage;\n      setSelectedLanguage(languageToSet);\n    },\n    [selectedLanguage]\n  );\n  return [\n    selectedLanguage,\n    prevSelectedLanguage.current,\n    setSelectedLanguageWithBackup,\n    setSelectedLanguage,\n  ];\n};\n\nconst showAlert = () => {\n  const title = 'Unable to fetch data';\n  const message = 'Please check if you are connected to the internet';\n  // @TODO: SurveyNativeBridge\n  Alert.alert(title, message, [\n    {\n      text: 'OK',\n    },\n  ]);\n};\n\nconst defaultOnCloseHandler = () => {\n  console.log('please provide your own onClose function when using SDKEntry');\n};\n\n/**\n * @param {Props} param0\n */\nexport const SurveyContextProvider = ({\n  surveyId,\n  children,\n  defaultLanguage = 'en',\n  onClose = defaultOnCloseHandler,\n}) => {\n  const [\n    selectedLanguage,\n    prevSelectedLanguage,\n    setSelectedLanguageWithBackup,\n    setSelectedLanguage,\n  ] = useSelectedLanguageState(defaultLanguage);\n\n  // handler the rejection when switching language\n  const onRejectHandler = React.useCallback(() => {\n    if (\n      !isNil(prevSelectedLanguage) &&\n      prevSelectedLanguage !== selectedLanguage\n    ) {\n      // fallback to previous language directly\n      setSelectedLanguage(prevSelectedLanguage);\n      showAlert();\n    }\n  }, [selectedLanguage, prevSelectedLanguage, setSelectedLanguage]);\n\n  const { data, error, isPending } = useAsync({\n    promiseFn: getProgram,\n    onReject: onRejectHandler,\n\n    surveyId,\n    language: selectedLanguage,\n\n    // watch, only re-run the promise, when language is changed or surveyId is changed\n    watchFn: (props, prevProps) =>\n      (props.language !== prevProps.language &&\n        props.language !== prevSelectedLanguage) ||\n      props.surveyId !== prevProps.surveyId,\n  });\n\n  /** @type {SurveyContextValue} */\n  const contextValue = React.useMemo(\n    () => ({\n      onClose,\n      survey: data,\n      changeLanguage: setSelectedLanguageWithBackup,\n    }),\n    [data, onClose, setSelectedLanguageWithBackup]\n  );\n\n  // initial loading data view\n  if (!data) {\n    // loading\n    let content = (\n      <View style={GlobalStyle.fullCenter}>\n        <ActivityIndicator size=\"large\" />\n      </View>\n    );\n    if (error) {\n      let placeholderProps = {\n        imageType: PlaceholderImageTypes.ProgramUnavailable,\n        message:\n          'Sorry for the inconvenience.\\nPlease come back and check later on.',\n      };\n      if (isRequestTimeoutError(error) || isNoInternetError(error)) {\n        placeholderProps = {\n          imageType: PlaceholderImageTypes.NoInternet,\n          message: 'Please check if you are connected to the internet',\n        };\n      }\n      content = <PlaceholderScreen {...placeholderProps} />;\n    }\n    return <FakeScreen onClose={onClose}>{content}</FakeScreen>;\n  }\n\n  return (\n    <SurveyContext.Provider value={contextValue}>\n      <View style={GlobalStyle.flex1}>\n        {children}\n        <ActivityIndicatorMask loading={isPending} />\n      </View>\n    </SurveyContext.Provider>\n  );\n};\n\n/** @typedef {import('../../SDKEntry').SDKEntryProps} Props */\n"]}