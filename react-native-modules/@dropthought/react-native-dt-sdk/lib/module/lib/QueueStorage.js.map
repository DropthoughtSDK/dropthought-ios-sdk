{"version":3,"sources":["QueueStorage.js"],"names":["loadData","removeData","encryptedStorage","head","tail","append","waitUntil","check","round","Promise","resolve","timeout","setTimeout","QueueStorage","constructor","key","storageKey","queue","initialized","syncToStorage","setItemT","migration","queuedElements","length","initialize","undefined","getItemT","concat","clear","getAll","front","enqueue","element","Array","isArray","dequeue","firstElement"],"mappings":"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","sourcesContent":["/**\n * @description simple queue operation, and sync to async storage with designated key\n */\nimport { loadData, removeData } from './Storage';\nimport encryptedStorage from './encrypted-storage';\nimport { head, tail, append } from 'ramda';\n\n/**\n * @param {() => boolean} check\n * @returns\n */\nconst waitUntil = async (check) => {\n  let round = 0;\n  return new Promise((resolve) => {\n    const timeout = () => {\n      round++;\n      setTimeout(() => {\n        if (check() || round >= 20) {\n          resolve();\n          return;\n        } else {\n          timeout();\n        }\n      }, 300);\n    };\n    timeout();\n  });\n};\n\n/**\n * @example\n *     const basicTextQueue = new QueueStorage({ key: 'Storage-basic-text'})\n *     basicTextQueue.enqueue('a')  // queue: ['a']\n *     basicTextQueue.front() // => 'a'\n *     basicTextQueue.enqueue('b') // queue: ['a', 'b']\n *     basicTextQueue.enqueue(['c', 'd']) // queue: ['a', 'b', 'c', 'd']\n *     basicTextQueue.front() // => 'a'\n *\n *     basicTextQueue.dequeue()  // queue: ['b', 'c', 'd']\n *     basicTextQueue.front() // => 'b'\n * @template T\n */\nexport class QueueStorage {\n  constructor({ key }) {\n    /** @type {string} */\n    this.storageKey = key;\n    /** @type {T[]} */\n    this.queue = [];\n\n    /** @type {boolean | null | undefined} */\n    this.initialized = null; // null -> not start yet, undefined -> in progress, true -> finished\n  }\n\n  /**\n   * @private\n   */\n  async syncToStorage() {\n    if (this.initialized === null) return;\n    if (typeof this.initialized === 'undefined') {\n      await waitUntil(() => this.initialized === true);\n    }\n    return encryptedStorage.setItemT(this.storageKey, this.queue);\n  }\n\n  /**\n   * @private\n   */\n  async migration() {\n    const queuedElements = await loadData(this.storageKey);\n    if (!queuedElements || !queuedElements.length) {\n      // console.log('### no data in', this.storageKey)\n      return;\n    }\n    await encryptedStorage.setItemT(this.storageKey, queuedElements);\n    await removeData(this.storageKey);\n  }\n\n  /**\n   * @public\n   */\n  async initialize() {\n    // only initialize once\n    if (this.initialized === true) return;\n    if (typeof this.initialized === 'undefined') {\n      return waitUntil(() => this.initialized === true);\n    }\n    this.initialized = undefined;\n\n    await this.migration();\n\n    const queuedElements = await encryptedStorage.getItemT(this.storageKey, []);\n\n    this.queue = queuedElements.concat(this.queue);\n    this.initialized = true;\n    await this.syncToStorage();\n  }\n\n  async clear() {\n    this.queue = [];\n    await this.syncToStorage();\n  }\n\n  /**\n   * @returns {T[]}\n   */\n  getAll() {\n    return this.queue;\n  }\n\n  /**\n   * get the first element of the queue\n   * @returns {T|undefined}\n   */\n  front() {\n    return head(this.queue);\n  }\n\n  /**\n   * adding element(s) to the back of the queue\n   * @param {T|[T]} element\n   */\n  enqueue(element) {\n    // if element is an array, use array concat, otherwise, use append\n    if (Array.isArray(element)) {\n      this.queue = this.queue.concat(element);\n    } else {\n      this.queue = append(element, this.queue);\n    }\n    this.syncToStorage();\n  }\n\n  /**\n   * remove an element from the front of the queue\n   * @returns {T|undefined}\n   */\n  dequeue() {\n    const firstElement = head(this.queue);\n    this.queue = tail(this.queue);\n    this.syncToStorage();\n    return firstElement;\n  }\n}\n\nexport default QueueStorage;\n"]}