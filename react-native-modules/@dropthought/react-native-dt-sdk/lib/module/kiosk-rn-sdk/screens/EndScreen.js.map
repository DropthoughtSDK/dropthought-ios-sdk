{"version":3,"sources":["EndScreen.js"],"names":["React","useBackHandler","EndScreenLayout","useSurvey","useSurveyContext","useOnSubmitSuccessCallback","useOnSubmitCallback","useBackForDismiss","onClose","backHandler","useCallback","EndScreen","error","surveyFeedback","survey","onSubmitSuccessCallback","onSubmitCallback","useEffect"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,+BAA/B;AACA,SAASC,eAAT,QAAgC,8BAAhC;AACA,SAASC,SAAT,EAAoBC,gBAApB,QAA4C,oBAA5C;AACA,SACEC,0BADF,EAEEC,mBAFF,QAGO,0BAHP;;AAKA,MAAMC,iBAAiB,GAAG,MAAM;AAC9B,QAAM;AAAEC,IAAAA;AAAF,MAAcJ,gBAAgB,EAApC;AACA,QAAMK,WAAW,GAAGT,KAAK,CAACU,WAAN,CAAkB,MAAM;AAC1CF,IAAAA,OAAO;AACP,WAAO,IAAP;AACD,GAHmB,EAGjB,CAACA,OAAD,CAHiB,CAApB;AAKAP,EAAAA,cAAc,CAACQ,WAAD,CAAd;AACD,CARD;AAUA;AACA;AACA;AACA;;;AACA,MAAME,SAAS,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAA+B;AAC/C,QAAMC,MAAM,GAAGX,SAAS,EAAxB;AACA,QAAMY,uBAAuB,GAAGV,0BAA0B,EAA1D;AACA,QAAMW,gBAAgB,GAAGV,mBAAmB,EAA5C;AAEAN,EAAAA,KAAK,CAACiB,SAAN,CAAgB,MAAM;AACpB;AACA,QAAID,gBAAJ,EAAsB;AACpBA,MAAAA,gBAAgB,CAACH,cAAD,EAAiBD,KAAjB,CAAhB,CADoB,CAEpB;;AACA,UAAI,CAACA,KAAD,IAAUG,uBAAd,EAAuC;AACrCA,QAAAA,uBAAuB,CAACF,cAAD,CAAvB;AACD;AACF,KARmB,CASpB;AACA;AACA;;AACD,GAZD,EAYG,EAZH;AAcAN,EAAAA,iBAAiB;AACjB,sBAAO,oBAAC,eAAD;AAAiB,IAAA,MAAM,EAAEO;AAAzB,IAAP;AACD,CArBD;;AAuBA,eAAeH,SAAf;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport { useBackHandler } from '@react-native-community/hooks';\nimport { EndScreenLayout } from '@dropthought/react-native-ui';\nimport { useSurvey, useSurveyContext } from '../contexts/survey';\nimport {\n  useOnSubmitSuccessCallback,\n  useOnSubmitCallback,\n} from '../contexts/custom-props';\n\nconst useBackForDismiss = () => {\n  const { onClose } = useSurveyContext();\n  const backHandler = React.useCallback(() => {\n    onClose();\n    return true;\n  }, [onClose]);\n\n  useBackHandler(backHandler);\n};\n\n/**\n * @type {React.FunctionComponent<ScreenProps>}\n * @param {ScreenProps} props\n */\nconst EndScreen = ({ error, surveyFeedback }) => {\n  const survey = useSurvey();\n  const onSubmitSuccessCallback = useOnSubmitSuccessCallback();\n  const onSubmitCallback = useOnSubmitCallback();\n\n  React.useEffect(() => {\n    // passing data to native, if error is undefined, null, 0, it means success\n    if (onSubmitCallback) {\n      onSubmitCallback(surveyFeedback, error);\n      // deprecate later\n      if (!error && onSubmitSuccessCallback) {\n        onSubmitSuccessCallback(surveyFeedback);\n      }\n    }\n    // if (surveyFeedback)\n    //     SurveyNativeBridge.onFeedbackResult(surveyFeedback, error || 0)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useBackForDismiss();\n  return <EndScreenLayout survey={survey} />;\n};\n\nexport default EndScreen;\n\n/**\n * @typedef {import('../../data').SurveyFeedback} SurveyFeedback\n */\n\n/**\n * @typedef {Object} ScreenProps\n * @property {Error=} error\n * @property {SurveyFeedback=} surveyFeedback\n */\n"]}