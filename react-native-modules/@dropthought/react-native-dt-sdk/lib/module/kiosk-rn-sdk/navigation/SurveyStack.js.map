{"version":3,"sources":["SurveyStack.tsx"],"names":["React","View","StyleSheet","NativeModules","isEmpty","isNil","PlaceholderImageTypes","PlaceholderScreen","i18n","SurveyScreenLayout","ActivityIndicatorMask","useAsync","useMetadata","StartScreen","EndScreen","FakeScreen","useSurveyContext","submitFeedback","ScreenWrapper","Header","fromJSToAPIDateStr","noData","a","Stack","survey","onClose","themeColor","surveyProperty","hexCode","visiblePageIds","setVisiblePageIds","useState","endScreenvisible","setEndScreenvisible","surveyFeedback","setSurveyFeedback","undefined","error","setError","metadata","run","isPending","loading","deferFn","onResolve","onReject","rejectedError","handleNextPage","useCallback","nextPageIndex","pageOrder","length","prevPageIds","nextPageId","filter","prevPageId","handleStart","handlePrevPage","slice","handleSubmit","feedback","timeZone","DtSdk","getConstants","createdTime","Date","now","styles","flexOne","surveyName","map","pageId","pageIndex","includes","SurveyStack","pages","surveyStartDate","surveyEndDate","ProgramUnavailable","t","create","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet, NativeModules } from 'react-native';\nimport { isEmpty, isNil } from 'ramda';\nimport {\n  PlaceholderImageTypes,\n  PlaceholderScreen,\n  i18n,\n  SurveyScreenLayout,\n  ActivityIndicatorMask,\n} from '@dropthought/react-native-ui';\nimport { useAsync } from 'react-async';\nimport { useMetadata } from '../contexts/custom-props';\nimport StartScreen from '../screens/StartScreen';\nimport EndScreen from '../screens/EndScreen';\nimport FakeScreen from '../screens/FakeScreen';\nimport { useSurveyContext } from '../contexts/survey';\nimport { submitFeedback } from '../../lib/Feedback';\nimport ScreenWrapper from './ScreenWrapper';\nimport Header from './Header';\nimport { fromJSToAPIDateStr } from '../../lib/DateTimerParser';\nimport type { Survey } from '../../data';\n\ntype StackProps = {\n  survey: Survey;\n};\n\nconst noData = (a: any) => isNil(a) || isEmpty(a);\n\nconst Stack: React.FunctionComponent<StackProps> = ({ survey }) => {\n  const { onClose } = useSurveyContext();\n  const themeColor = survey.surveyProperty.hexCode;\n  const [visiblePageIds, setVisiblePageIds] = React.useState([]);\n  const [endScreenvisible, setEndScreenvisible] = React.useState(false);\n  const [surveyFeedback, setSurveyFeedback] = React.useState(undefined);\n  const [error, setError] = React.useState<Error | undefined>();\n  const metadata = useMetadata();\n  const { run, isPending: loading } = useAsync({\n    deferFn: submitFeedback,\n    onResolve: () => {\n      setEndScreenvisible(true);\n    },\n    onReject: (rejectedError) => {\n      setError(rejectedError);\n      setEndScreenvisible(true);\n    },\n  });\n\n  const handleNextPage = React.useCallback(\n    (nextPageIndex) => {\n      if (nextPageIndex < survey.pageOrder.length) {\n        setVisiblePageIds((prevPageIds) => {\n          const nextPageId = survey.pageOrder[nextPageIndex];\n          return [\n            ...prevPageIds.filter(\n              (prevPageId: string) => prevPageId !== nextPageId\n            ),\n            nextPageId,\n          ];\n        });\n      }\n    },\n    [survey.pageOrder]\n  );\n\n  const handleStart = React.useCallback(() => {\n    handleNextPage(0);\n  }, [handleNextPage]);\n\n  const handlePrevPage = React.useCallback(() => {\n    setVisiblePageIds((prevPageIds) => prevPageIds.slice(0, -1));\n  }, []);\n\n  const handleSubmit = React.useCallback(\n    (feedback) => {\n      const { timeZone } = NativeModules.DtSdk.getConstants();\n      setSurveyFeedback(feedback);\n      run({\n        ...feedback,\n        metadata,\n        createdTime: fromJSToAPIDateStr(Date.now()),\n        timeZone,\n      });\n    },\n    [metadata, run]\n  );\n\n  return (\n    <View style={styles.flexOne}>\n      <Header\n        title={survey.surveyName}\n        onClose={onClose}\n        themeColor={themeColor}\n      />\n      <View style={styles.flexOne}>\n        <ScreenWrapper\n          visible\n          isOnTop={!endScreenvisible && visiblePageIds.length === 0}\n        >\n          <StartScreen onStart={handleStart} />\n        </ScreenWrapper>\n        {survey.pageOrder.map((pageId: string, pageIndex: number) => {\n          return (\n            <ScreenWrapper\n              key={pageId}\n              visible={visiblePageIds.includes(pageId)}\n              isOnTop={visiblePageIds[visiblePageIds.length - 1] === pageId}\n            >\n              <SurveyScreenLayout\n                survey={survey}\n                pageIndex={pageIndex}\n                onNextPage={handleNextPage}\n                onPrevPage={handlePrevPage}\n                onSubmit={handleSubmit}\n              />\n            </ScreenWrapper>\n          );\n        })}\n        <ScreenWrapper visible={endScreenvisible} isOnTop={endScreenvisible}>\n          <EndScreen error={error} surveyFeedback={surveyFeedback} />\n        </ScreenWrapper>\n      </View>\n      <ActivityIndicatorMask loading={loading} />\n    </View>\n  );\n};\n\ntype SurveyStackProps = {\n  survey: Survey;\n};\n\nconst SurveyStack: React.FunctionComponent<SurveyStackProps> = () => {\n  const { survey, onClose } = useSurveyContext();\n  // check if survey data is valid\n  if (\n    noData(survey.pages) ||\n    noData(survey.surveyProperty) ||\n    noData(survey.surveyStartDate) ||\n    noData(survey.surveyEndDate)\n  ) {\n    // need to render placeholder\n    return (\n      <FakeScreen onClose={onClose}>\n        <PlaceholderScreen\n          imageType={PlaceholderImageTypes.ProgramUnavailable}\n          message={i18n.t('start-survey:placeholder-message')}\n        />\n      </FakeScreen>\n    );\n  }\n  return <Stack survey={survey} />;\n};\n\nexport default SurveyStack;\n\nconst styles = StyleSheet.create({\n  flexOne: {\n    flex: 1,\n  },\n});\n"]}