{"version":3,"sources":["ScreenWrapper.tsx"],"names":["React","Platform","View","Animated","Easing","StyleSheet","useWindowDimensions","DefaultScreenWrapper","children","visible","isOnTop","localVisible","setLocalVisible","useState","width","animatedValueRef","useRef","Value","useEffect","timing","current","toValue","duration","useNativeDriver","easing","quad","start","absoluteFill","styles","flexOne","whiteBackground","transform","translateX","interpolate","inputRange","outputRange","extrapolate","AndroidScreenWrapper","height","translateY","select","android","default","create","flex","backgroundColor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Platform, View, Animated, Easing, StyleSheet } from 'react-native';\nimport useWindowDimensions from './useWindowDimensions';\n\ntype Props = {\n  children: React.ReactNode;\n  visible: boolean;\n  isOnTop: boolean;\n};\n\nconst DefaultScreenWrapper: React.FunctionComponent<Props> = ({\n  children,\n  visible,\n  isOnTop,\n}) => {\n  const [localVisible, setLocalVisible] = React.useState(visible);\n  const { width } = useWindowDimensions();\n  const animatedValueRef = React.useRef(new Animated.Value(visible ? 0 : 1));\n\n  React.useEffect(() => {\n    Animated.timing(animatedValueRef.current, {\n      toValue: visible ? (isOnTop ? 0 : -0.3) : 1,\n      duration: 300,\n      useNativeDriver: true,\n      easing: Easing.quad,\n    }).start(() => {\n      setLocalVisible(visible);\n    });\n  }, [visible, isOnTop]);\n\n  return (\n    <View\n      style={StyleSheet.absoluteFill}\n      collapsable={false}\n      pointerEvents=\"box-none\"\n    >\n      <Animated.View\n        style={[\n          styles.flexOne,\n          styles.whiteBackground,\n          {\n            transform: [\n              {\n                translateX: animatedValueRef.current.interpolate({\n                  inputRange: [-1, 1],\n                  outputRange: [-1 * width, width],\n                  extrapolate: 'clamp',\n                }),\n              },\n            ],\n          },\n        ]}\n        collapsable={false}\n      >\n        {visible || localVisible ? children : null}\n      </Animated.View>\n    </View>\n  );\n};\n\nconst AndroidScreenWrapper: React.FunctionComponent<Props> = ({\n  children,\n  visible,\n  isOnTop,\n}) => {\n  const [localVisible, setLocalVisible] = React.useState(visible);\n  const { height } = useWindowDimensions();\n  const animatedValueRef = React.useRef(new Animated.Value(visible ? 0 : 1));\n\n  React.useEffect(() => {\n    Animated.timing(animatedValueRef.current, {\n      toValue: visible || isOnTop ? 0 : 1,\n      duration: 250,\n      useNativeDriver: true,\n      easing: Easing.quad,\n    }).start(() => {\n      setLocalVisible(visible);\n    });\n  }, [visible, isOnTop]);\n\n  return (\n    <View\n      style={StyleSheet.absoluteFill}\n      collapsable={false}\n      pointerEvents=\"box-none\"\n    >\n      <Animated.View\n        style={[\n          styles.flexOne,\n          styles.whiteBackground,\n          {\n            transform: [\n              {\n                translateY: animatedValueRef.current.interpolate({\n                  inputRange: [-1, 1],\n                  outputRange: [-1 * height, height],\n                  extrapolate: 'clamp',\n                }),\n              },\n            ],\n          },\n        ]}\n        collapsable={false}\n      >\n        {visible || localVisible ? children : null}\n      </Animated.View>\n    </View>\n  );\n};\n\nexport default Platform.select({\n  android: AndroidScreenWrapper,\n  default: DefaultScreenWrapper,\n});\n\nconst styles = StyleSheet.create({\n  flexOne: {\n    flex: 1,\n  },\n  whiteBackground: {\n    backgroundColor: 'white',\n  },\n});\n"]}