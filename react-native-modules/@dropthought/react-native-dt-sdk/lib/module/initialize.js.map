{"version":3,"sources":["initialize.ts"],"names":["sdkFetcher","initialize","feedbackUploader","initStorage","initializeWithAPIKey","param","apiKey","baseURL","storage","init"],"mappings":"AAAA;AACA,SAASA,UAAT,QAA2B,WAA3B,C,CAEA;;AACA,SAASC,UAAT,QAA2B,yBAA3B,C,CAEA;;AACA,SAASC,gBAAT,QAAiC,yBAAjC;AAEA,SAASC,WAAT,QAAqC,eAArC;AAEA,OAAO,eAAeC,oBAAf,CAAoCC,KAApC,EAIJ;AACD,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,OAAV;AAAmBC,IAAAA;AAAnB,MAA+BH,KAArC;AACAL,EAAAA,UAAU,CAACS,IAAX,CAAgB;AACdF,IAAAA,OADc;AAEdD,IAAAA;AAFc,GAAhB,EAFC,CAMD;;AACAH,EAAAA,WAAW,CAACK,OAAD,CAAX;AACA,QAAMP,UAAU,CAACK,MAAD,EAASE,OAAT,CAAhB;AACA,QAAMN,gBAAgB,CAACD,UAAjB,EAAN;AACD","sourcesContent":["// @ts-ignore\nimport { sdkFetcher } from './lib/API';\n\n// @ts-ignore\nimport { initialize } from './lib/encrypted-storage';\n\n// @ts-ignore\nimport { feedbackUploader } from './lib/FeedbacksUploader';\n\nimport { initStorage, Storage } from './lib/Storage';\n\nexport async function initializeWithAPIKey(param: {\n  apiKey: string;\n  baseURL?: string;\n  storage: Storage;\n}) {\n  const { apiKey, baseURL, storage } = param;\n  sdkFetcher.init({\n    baseURL,\n    apiKey,\n  });\n  // storage setting\n  initStorage(storage);\n  await initialize(apiKey, storage);\n  await feedbackUploader.initialize();\n}\n"]}